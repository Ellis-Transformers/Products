
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type photosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "photos"
  objects: {
    styles: stylesPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    styleId: number
    url: string
    thumbnail_url: string
  }, ExtArgs["result"]["photos"]>
  composites: {}
}

/**
 * Model photos
 * 
 */
export type photos = runtime.Types.DefaultSelection<photosPayload>
export type productPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "product"
  objects: {
    features: featurePayload<ExtArgs>[]
    styles: stylesPayload<ExtArgs>[]
    related: relatedPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    slogan: string
    description: string
    category: string
    default_price: Prisma.Decimal | null
  }, ExtArgs["result"]["product"]>
  composites: {}
}

/**
 * Model product
 * 
 */
export type product = runtime.Types.DefaultSelection<productPayload>
export type relatedPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "related"
  objects: {
    product1: productPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    current_product_id: number
    related_product_id: number
  }, ExtArgs["result"]["related"]>
  composites: {}
}

/**
 * Model related
 * 
 */
export type related = runtime.Types.DefaultSelection<relatedPayload>
export type featurePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "feature"
  objects: {
    product: productPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    product_id: number
    feature: string
    value: string | null
  }, ExtArgs["result"]["feature"]>
  composites: {}
}

/**
 * Model feature
 * 
 */
export type feature = runtime.Types.DefaultSelection<featurePayload>
export type stylesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "styles"
  objects: {
    product: productPayload<ExtArgs>
    photos: photosPayload<ExtArgs>[]
    sku: skuPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    productId: number
    name: string
    sale_price: Prisma.Decimal | null
    original_price: Prisma.Decimal | null
    default_style: boolean
  }, ExtArgs["result"]["styles"]>
  composites: {}
}

/**
 * Model styles
 * 
 */
export type styles = runtime.Types.DefaultSelection<stylesPayload>
export type skuPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "sku"
  objects: {
    style: stylesPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    styleId: number
    size: string
    quantity: number
  }, ExtArgs["result"]["sku"]>
  composites: {}
}

/**
 * Model sku
 * 
 */
export type sku = runtime.Types.DefaultSelection<skuPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Photos
 * const photos = await prisma.photos.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Photos
   * const photos = await prisma.photos.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.photos`: Exposes CRUD operations for the **photos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photos
    * const photos = await prisma.photos.findMany()
    * ```
    */
  get photos(): Prisma.photosDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<ExtArgs>;

  /**
   * `prisma.related`: Exposes CRUD operations for the **related** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Relateds
    * const relateds = await prisma.related.findMany()
    * ```
    */
  get related(): Prisma.relatedDelegate<ExtArgs>;

  /**
   * `prisma.feature`: Exposes CRUD operations for the **feature** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Features
    * const features = await prisma.feature.findMany()
    * ```
    */
  get feature(): Prisma.featureDelegate<ExtArgs>;

  /**
   * `prisma.styles`: Exposes CRUD operations for the **styles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Styles
    * const styles = await prisma.styles.findMany()
    * ```
    */
  get styles(): Prisma.stylesDelegate<ExtArgs>;

  /**
   * `prisma.sku`: Exposes CRUD operations for the **sku** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skus
    * const skus = await prisma.sku.findMany()
    * ```
    */
  get sku(): Prisma.skuDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 5.0.0
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    photos: 'photos',
    product: 'product',
    related: 'related',
    feature: 'feature',
    styles: 'styles',
    sku: 'sku'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'photos' | 'product' | 'related' | 'feature' | 'styles' | 'sku'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      photos: {
        payload: photosPayload<ExtArgs>
        fields: Prisma.photosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.photosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<photosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.photosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<photosPayload>
          }
          findFirst: {
            args: Prisma.photosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<photosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.photosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<photosPayload>
          }
          findMany: {
            args: Prisma.photosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<photosPayload>[]
          }
          create: {
            args: Prisma.photosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<photosPayload>
          }
          createMany: {
            args: Prisma.photosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.photosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<photosPayload>
          }
          update: {
            args: Prisma.photosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<photosPayload>
          }
          deleteMany: {
            args: Prisma.photosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.photosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.photosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<photosPayload>
          }
          aggregate: {
            args: Prisma.PhotosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePhotos>
          }
          groupBy: {
            args: Prisma.photosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PhotosGroupByOutputType>[]
          }
          count: {
            args: Prisma.photosCountArgs<ExtArgs>,
            result: $Utils.Optional<PhotosCountAggregateOutputType> | number
          }
        }
      }
      product: {
        payload: productPayload<ExtArgs>
        fields: Prisma.productFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productPayload>
          }
          findFirst: {
            args: Prisma.productFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productPayload>
          }
          findMany: {
            args: Prisma.productFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productPayload>[]
          }
          create: {
            args: Prisma.productCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productPayload>
          }
          createMany: {
            args: Prisma.productCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productPayload>
          }
          update: {
            args: Prisma.productUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productPayload>
          }
          deleteMany: {
            args: Prisma.productDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.productGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.productCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      related: {
        payload: relatedPayload<ExtArgs>
        fields: Prisma.relatedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.relatedFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<relatedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.relatedFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<relatedPayload>
          }
          findFirst: {
            args: Prisma.relatedFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<relatedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.relatedFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<relatedPayload>
          }
          findMany: {
            args: Prisma.relatedFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<relatedPayload>[]
          }
          create: {
            args: Prisma.relatedCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<relatedPayload>
          }
          createMany: {
            args: Prisma.relatedCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.relatedDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<relatedPayload>
          }
          update: {
            args: Prisma.relatedUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<relatedPayload>
          }
          deleteMany: {
            args: Prisma.relatedDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.relatedUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.relatedUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<relatedPayload>
          }
          aggregate: {
            args: Prisma.RelatedAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRelated>
          }
          groupBy: {
            args: Prisma.relatedGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RelatedGroupByOutputType>[]
          }
          count: {
            args: Prisma.relatedCountArgs<ExtArgs>,
            result: $Utils.Optional<RelatedCountAggregateOutputType> | number
          }
        }
      }
      feature: {
        payload: featurePayload<ExtArgs>
        fields: Prisma.featureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.featureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<featurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.featureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<featurePayload>
          }
          findFirst: {
            args: Prisma.featureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<featurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.featureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<featurePayload>
          }
          findMany: {
            args: Prisma.featureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<featurePayload>[]
          }
          create: {
            args: Prisma.featureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<featurePayload>
          }
          createMany: {
            args: Prisma.featureCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.featureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<featurePayload>
          }
          update: {
            args: Prisma.featureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<featurePayload>
          }
          deleteMany: {
            args: Prisma.featureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.featureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.featureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<featurePayload>
          }
          aggregate: {
            args: Prisma.FeatureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeature>
          }
          groupBy: {
            args: Prisma.featureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeatureGroupByOutputType>[]
          }
          count: {
            args: Prisma.featureCountArgs<ExtArgs>,
            result: $Utils.Optional<FeatureCountAggregateOutputType> | number
          }
        }
      }
      styles: {
        payload: stylesPayload<ExtArgs>
        fields: Prisma.stylesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.stylesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<stylesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.stylesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<stylesPayload>
          }
          findFirst: {
            args: Prisma.stylesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<stylesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.stylesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<stylesPayload>
          }
          findMany: {
            args: Prisma.stylesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<stylesPayload>[]
          }
          create: {
            args: Prisma.stylesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<stylesPayload>
          }
          createMany: {
            args: Prisma.stylesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.stylesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<stylesPayload>
          }
          update: {
            args: Prisma.stylesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<stylesPayload>
          }
          deleteMany: {
            args: Prisma.stylesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.stylesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.stylesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<stylesPayload>
          }
          aggregate: {
            args: Prisma.StylesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStyles>
          }
          groupBy: {
            args: Prisma.stylesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StylesGroupByOutputType>[]
          }
          count: {
            args: Prisma.stylesCountArgs<ExtArgs>,
            result: $Utils.Optional<StylesCountAggregateOutputType> | number
          }
        }
      }
      sku: {
        payload: skuPayload<ExtArgs>
        fields: Prisma.skuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.skuFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<skuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.skuFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<skuPayload>
          }
          findFirst: {
            args: Prisma.skuFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<skuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.skuFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<skuPayload>
          }
          findMany: {
            args: Prisma.skuFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<skuPayload>[]
          }
          create: {
            args: Prisma.skuCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<skuPayload>
          }
          createMany: {
            args: Prisma.skuCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.skuDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<skuPayload>
          }
          update: {
            args: Prisma.skuUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<skuPayload>
          }
          deleteMany: {
            args: Prisma.skuDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.skuUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.skuUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<skuPayload>
          }
          aggregate: {
            args: Prisma.SkuAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSku>
          }
          groupBy: {
            args: Prisma.skuGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SkuGroupByOutputType>[]
          }
          count: {
            args: Prisma.skuCountArgs<ExtArgs>,
            result: $Utils.Optional<SkuCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    features: number
    styles: number
    related: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    features?: boolean | ProductCountOutputTypeCountFeaturesArgs
    styles?: boolean | ProductCountOutputTypeCountStylesArgs
    related?: boolean | ProductCountOutputTypeCountRelatedArgs
  }

  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountFeaturesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: featureWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountStylesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: stylesWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountRelatedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: relatedWhereInput
  }



  /**
   * Count Type StylesCountOutputType
   */


  export type StylesCountOutputType = {
    photos: number
    sku: number
  }

  export type StylesCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    photos?: boolean | StylesCountOutputTypeCountPhotosArgs
    sku?: boolean | StylesCountOutputTypeCountSkuArgs
  }

  // Custom InputTypes

  /**
   * StylesCountOutputType without action
   */
  export type StylesCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StylesCountOutputType
     */
    select?: StylesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StylesCountOutputType without action
   */
  export type StylesCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: photosWhereInput
  }


  /**
   * StylesCountOutputType without action
   */
  export type StylesCountOutputTypeCountSkuArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: skuWhereInput
  }



  /**
   * Models
   */

  /**
   * Model photos
   */


  export type AggregatePhotos = {
    _count: PhotosCountAggregateOutputType | null
    _avg: PhotosAvgAggregateOutputType | null
    _sum: PhotosSumAggregateOutputType | null
    _min: PhotosMinAggregateOutputType | null
    _max: PhotosMaxAggregateOutputType | null
  }

  export type PhotosAvgAggregateOutputType = {
    id: number | null
    styleId: number | null
  }

  export type PhotosSumAggregateOutputType = {
    id: number | null
    styleId: number | null
  }

  export type PhotosMinAggregateOutputType = {
    id: number | null
    styleId: number | null
    url: string | null
    thumbnail_url: string | null
  }

  export type PhotosMaxAggregateOutputType = {
    id: number | null
    styleId: number | null
    url: string | null
    thumbnail_url: string | null
  }

  export type PhotosCountAggregateOutputType = {
    id: number
    styleId: number
    url: number
    thumbnail_url: number
    _all: number
  }


  export type PhotosAvgAggregateInputType = {
    id?: true
    styleId?: true
  }

  export type PhotosSumAggregateInputType = {
    id?: true
    styleId?: true
  }

  export type PhotosMinAggregateInputType = {
    id?: true
    styleId?: true
    url?: true
    thumbnail_url?: true
  }

  export type PhotosMaxAggregateInputType = {
    id?: true
    styleId?: true
    url?: true
    thumbnail_url?: true
  }

  export type PhotosCountAggregateInputType = {
    id?: true
    styleId?: true
    url?: true
    thumbnail_url?: true
    _all?: true
  }

  export type PhotosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which photos to aggregate.
     */
    where?: photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photos to fetch.
     */
    orderBy?: photosOrderByWithRelationInput | photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned photos
    **/
    _count?: true | PhotosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhotosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhotosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhotosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhotosMaxAggregateInputType
  }

  export type GetPhotosAggregateType<T extends PhotosAggregateArgs> = {
        [P in keyof T & keyof AggregatePhotos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhotos[P]>
      : GetScalarType<T[P], AggregatePhotos[P]>
  }




  export type photosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: photosWhereInput
    orderBy?: photosOrderByWithAggregationInput | photosOrderByWithAggregationInput[]
    by: PhotosScalarFieldEnum[] | PhotosScalarFieldEnum
    having?: photosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhotosCountAggregateInputType | true
    _avg?: PhotosAvgAggregateInputType
    _sum?: PhotosSumAggregateInputType
    _min?: PhotosMinAggregateInputType
    _max?: PhotosMaxAggregateInputType
  }


  export type PhotosGroupByOutputType = {
    id: number
    styleId: number
    url: string
    thumbnail_url: string
    _count: PhotosCountAggregateOutputType | null
    _avg: PhotosAvgAggregateOutputType | null
    _sum: PhotosSumAggregateOutputType | null
    _min: PhotosMinAggregateOutputType | null
    _max: PhotosMaxAggregateOutputType | null
  }

  type GetPhotosGroupByPayload<T extends photosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhotosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhotosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhotosGroupByOutputType[P]>
            : GetScalarType<T[P], PhotosGroupByOutputType[P]>
        }
      >
    >


  export type photosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    styleId?: boolean
    url?: boolean
    thumbnail_url?: boolean
    styles?: boolean | stylesArgs<ExtArgs>
  }, ExtArgs["result"]["photos"]>

  export type photosSelectScalar = {
    id?: boolean
    styleId?: boolean
    url?: boolean
    thumbnail_url?: boolean
  }

  export type photosInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    styles?: boolean | stylesArgs<ExtArgs>
  }


  type photosGetPayload<S extends boolean | null | undefined | photosArgs> = $Types.GetResult<photosPayload, S>

  type photosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<photosFindManyArgs, 'select' | 'include'> & {
      select?: PhotosCountAggregateInputType | true
    }

  export interface photosDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['photos'], meta: { name: 'photos' } }
    /**
     * Find zero or one Photos that matches the filter.
     * @param {photosFindUniqueArgs} args - Arguments to find a Photos
     * @example
     * // Get one Photos
     * const photos = await prisma.photos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends photosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, photosFindUniqueArgs<ExtArgs>>
    ): Prisma__photosClient<$Types.GetResult<photosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Photos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {photosFindUniqueOrThrowArgs} args - Arguments to find a Photos
     * @example
     * // Get one Photos
     * const photos = await prisma.photos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends photosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, photosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__photosClient<$Types.GetResult<photosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Photos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosFindFirstArgs} args - Arguments to find a Photos
     * @example
     * // Get one Photos
     * const photos = await prisma.photos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends photosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, photosFindFirstArgs<ExtArgs>>
    ): Prisma__photosClient<$Types.GetResult<photosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Photos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosFindFirstOrThrowArgs} args - Arguments to find a Photos
     * @example
     * // Get one Photos
     * const photos = await prisma.photos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends photosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, photosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__photosClient<$Types.GetResult<photosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Photos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Photos
     * const photos = await prisma.photos.findMany()
     * 
     * // Get first 10 Photos
     * const photos = await prisma.photos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const photosWithIdOnly = await prisma.photos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends photosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, photosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<photosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Photos.
     * @param {photosCreateArgs} args - Arguments to create a Photos.
     * @example
     * // Create one Photos
     * const Photos = await prisma.photos.create({
     *   data: {
     *     // ... data to create a Photos
     *   }
     * })
     * 
    **/
    create<T extends photosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, photosCreateArgs<ExtArgs>>
    ): Prisma__photosClient<$Types.GetResult<photosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Photos.
     *     @param {photosCreateManyArgs} args - Arguments to create many Photos.
     *     @example
     *     // Create many Photos
     *     const photos = await prisma.photos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends photosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, photosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Photos.
     * @param {photosDeleteArgs} args - Arguments to delete one Photos.
     * @example
     * // Delete one Photos
     * const Photos = await prisma.photos.delete({
     *   where: {
     *     // ... filter to delete one Photos
     *   }
     * })
     * 
    **/
    delete<T extends photosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, photosDeleteArgs<ExtArgs>>
    ): Prisma__photosClient<$Types.GetResult<photosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Photos.
     * @param {photosUpdateArgs} args - Arguments to update one Photos.
     * @example
     * // Update one Photos
     * const photos = await prisma.photos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends photosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, photosUpdateArgs<ExtArgs>>
    ): Prisma__photosClient<$Types.GetResult<photosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Photos.
     * @param {photosDeleteManyArgs} args - Arguments to filter Photos to delete.
     * @example
     * // Delete a few Photos
     * const { count } = await prisma.photos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends photosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, photosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Photos
     * const photos = await prisma.photos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends photosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, photosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Photos.
     * @param {photosUpsertArgs} args - Arguments to update or create a Photos.
     * @example
     * // Update or create a Photos
     * const photos = await prisma.photos.upsert({
     *   create: {
     *     // ... data to create a Photos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Photos we want to update
     *   }
     * })
    **/
    upsert<T extends photosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, photosUpsertArgs<ExtArgs>>
    ): Prisma__photosClient<$Types.GetResult<photosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosCountArgs} args - Arguments to filter Photos to count.
     * @example
     * // Count the number of Photos
     * const count = await prisma.photos.count({
     *   where: {
     *     // ... the filter for the Photos we want to count
     *   }
     * })
    **/
    count<T extends photosCountArgs>(
      args?: Subset<T, photosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhotosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhotosAggregateArgs>(args: Subset<T, PhotosAggregateArgs>): Prisma.PrismaPromise<GetPhotosAggregateType<T>>

    /**
     * Group by Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends photosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: photosGroupByArgs['orderBy'] }
        : { orderBy?: photosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, photosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhotosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the photos model
   */
  readonly fields: photosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for photos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__photosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    styles<T extends stylesArgs<ExtArgs> = {}>(args?: Subset<T, stylesArgs<ExtArgs>>): Prisma__stylesClient<$Types.GetResult<stylesPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the photos model
   */ 
  interface photosFieldRefs {
    readonly id: FieldRef<"photos", 'Int'>
    readonly styleId: FieldRef<"photos", 'Int'>
    readonly url: FieldRef<"photos", 'String'>
    readonly thumbnail_url: FieldRef<"photos", 'String'>
  }
    

  // Custom InputTypes

  /**
   * photos findUnique
   */
  export type photosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter, which photos to fetch.
     */
    where: photosWhereUniqueInput
  }


  /**
   * photos findUniqueOrThrow
   */
  export type photosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter, which photos to fetch.
     */
    where: photosWhereUniqueInput
  }


  /**
   * photos findFirst
   */
  export type photosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter, which photos to fetch.
     */
    where?: photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photos to fetch.
     */
    orderBy?: photosOrderByWithRelationInput | photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for photos.
     */
    cursor?: photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of photos.
     */
    distinct?: PhotosScalarFieldEnum | PhotosScalarFieldEnum[]
  }


  /**
   * photos findFirstOrThrow
   */
  export type photosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter, which photos to fetch.
     */
    where?: photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photos to fetch.
     */
    orderBy?: photosOrderByWithRelationInput | photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for photos.
     */
    cursor?: photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of photos.
     */
    distinct?: PhotosScalarFieldEnum | PhotosScalarFieldEnum[]
  }


  /**
   * photos findMany
   */
  export type photosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter, which photos to fetch.
     */
    where?: photosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photos to fetch.
     */
    orderBy?: photosOrderByWithRelationInput | photosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing photos.
     */
    cursor?: photosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photos.
     */
    skip?: number
    distinct?: PhotosScalarFieldEnum | PhotosScalarFieldEnum[]
  }


  /**
   * photos create
   */
  export type photosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * The data needed to create a photos.
     */
    data: XOR<photosCreateInput, photosUncheckedCreateInput>
  }


  /**
   * photos createMany
   */
  export type photosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many photos.
     */
    data: photosCreateManyInput | photosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * photos update
   */
  export type photosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * The data needed to update a photos.
     */
    data: XOR<photosUpdateInput, photosUncheckedUpdateInput>
    /**
     * Choose, which photos to update.
     */
    where: photosWhereUniqueInput
  }


  /**
   * photos updateMany
   */
  export type photosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update photos.
     */
    data: XOR<photosUpdateManyMutationInput, photosUncheckedUpdateManyInput>
    /**
     * Filter which photos to update
     */
    where?: photosWhereInput
  }


  /**
   * photos upsert
   */
  export type photosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * The filter to search for the photos to update in case it exists.
     */
    where: photosWhereUniqueInput
    /**
     * In case the photos found by the `where` argument doesn't exist, create a new photos with this data.
     */
    create: XOR<photosCreateInput, photosUncheckedCreateInput>
    /**
     * In case the photos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<photosUpdateInput, photosUncheckedUpdateInput>
  }


  /**
   * photos delete
   */
  export type photosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    /**
     * Filter which photos to delete.
     */
    where: photosWhereUniqueInput
  }


  /**
   * photos deleteMany
   */
  export type photosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which photos to delete
     */
    where?: photosWhereInput
  }


  /**
   * photos without action
   */
  export type photosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
  }



  /**
   * Model product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    default_price: Decimal | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    default_price: Decimal | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    slogan: string | null
    description: string | null
    category: string | null
    default_price: Decimal | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slogan: string | null
    description: string | null
    category: string | null
    default_price: Decimal | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    slogan: number
    description: number
    category: number
    default_price: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    default_price?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    default_price?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    slogan?: true
    description?: true
    category?: true
    default_price?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    slogan?: true
    description?: true
    category?: true
    default_price?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    slogan?: true
    description?: true
    category?: true
    default_price?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which product to aggregate.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type productGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productWhereInput
    orderBy?: productOrderByWithAggregationInput | productOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: number
    name: string
    slogan: string
    description: string
    category: string
    default_price: Decimal | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends productGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slogan?: boolean
    description?: boolean
    category?: boolean
    default_price?: boolean
    features?: boolean | product$featuresArgs<ExtArgs>
    styles?: boolean | product$stylesArgs<ExtArgs>
    related?: boolean | product$relatedArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type productSelectScalar = {
    id?: boolean
    name?: boolean
    slogan?: boolean
    description?: boolean
    category?: boolean
    default_price?: boolean
  }

  export type productInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    features?: boolean | product$featuresArgs<ExtArgs>
    styles?: boolean | product$stylesArgs<ExtArgs>
    related?: boolean | product$relatedArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeArgs<ExtArgs>
  }


  type productGetPayload<S extends boolean | null | undefined | productArgs> = $Types.GetResult<productPayload, S>

  type productCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<productFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface productDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product'], meta: { name: 'product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productFindUniqueArgs<ExtArgs>>
    ): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productFindFirstArgs<ExtArgs>>
    ): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<productPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends productCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productCreateArgs<ExtArgs>>
    ): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {productCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends productDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productDeleteArgs<ExtArgs>>
    ): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productUpdateArgs<ExtArgs>>
    ): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends productUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productUpsertArgs<ExtArgs>>
    ): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productGroupByArgs['orderBy'] }
        : { orderBy?: productGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product model
   */
  readonly fields: productFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    features<T extends product$featuresArgs<ExtArgs> = {}>(args?: Subset<T, product$featuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<featurePayload<ExtArgs>, T, 'findMany'>| Null>;

    styles<T extends product$stylesArgs<ExtArgs> = {}>(args?: Subset<T, product$stylesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<stylesPayload<ExtArgs>, T, 'findMany'>| Null>;

    related<T extends product$relatedArgs<ExtArgs> = {}>(args?: Subset<T, product$relatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<relatedPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the product model
   */ 
  interface productFieldRefs {
    readonly id: FieldRef<"product", 'Int'>
    readonly name: FieldRef<"product", 'String'>
    readonly slogan: FieldRef<"product", 'String'>
    readonly description: FieldRef<"product", 'String'>
    readonly category: FieldRef<"product", 'String'>
    readonly default_price: FieldRef<"product", 'Decimal'>
  }
    

  // Custom InputTypes

  /**
   * product findUnique
   */
  export type productFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }


  /**
   * product findUniqueOrThrow
   */
  export type productFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }


  /**
   * product findFirst
   */
  export type productFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * product findFirstOrThrow
   */
  export type productFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * product findMany
   */
  export type productFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * product create
   */
  export type productCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to create a product.
     */
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }


  /**
   * product createMany
   */
  export type productCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productCreateManyInput | productCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * product update
   */
  export type productUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to update a product.
     */
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     */
    where: productWhereUniqueInput
  }


  /**
   * product updateMany
   */
  export type productUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productWhereInput
  }


  /**
   * product upsert
   */
  export type productUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The filter to search for the product to update in case it exists.
     */
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     */
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }


  /**
   * product delete
   */
  export type productDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter which product to delete.
     */
    where: productWhereUniqueInput
  }


  /**
   * product deleteMany
   */
  export type productDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productWhereInput
  }


  /**
   * product.features
   */
  export type product$featuresArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
    where?: featureWhereInput
    orderBy?: featureOrderByWithRelationInput | featureOrderByWithRelationInput[]
    cursor?: featureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureScalarFieldEnum | FeatureScalarFieldEnum[]
  }


  /**
   * product.styles
   */
  export type product$stylesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
    where?: stylesWhereInput
    orderBy?: stylesOrderByWithRelationInput | stylesOrderByWithRelationInput[]
    cursor?: stylesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StylesScalarFieldEnum | StylesScalarFieldEnum[]
  }


  /**
   * product.related
   */
  export type product$relatedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
    where?: relatedWhereInput
    orderBy?: relatedOrderByWithRelationInput | relatedOrderByWithRelationInput[]
    cursor?: relatedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }


  /**
   * product without action
   */
  export type productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude<ExtArgs> | null
  }



  /**
   * Model related
   */


  export type AggregateRelated = {
    _count: RelatedCountAggregateOutputType | null
    _avg: RelatedAvgAggregateOutputType | null
    _sum: RelatedSumAggregateOutputType | null
    _min: RelatedMinAggregateOutputType | null
    _max: RelatedMaxAggregateOutputType | null
  }

  export type RelatedAvgAggregateOutputType = {
    id: number | null
    current_product_id: number | null
    related_product_id: number | null
  }

  export type RelatedSumAggregateOutputType = {
    id: number | null
    current_product_id: number | null
    related_product_id: number | null
  }

  export type RelatedMinAggregateOutputType = {
    id: number | null
    current_product_id: number | null
    related_product_id: number | null
  }

  export type RelatedMaxAggregateOutputType = {
    id: number | null
    current_product_id: number | null
    related_product_id: number | null
  }

  export type RelatedCountAggregateOutputType = {
    id: number
    current_product_id: number
    related_product_id: number
    _all: number
  }


  export type RelatedAvgAggregateInputType = {
    id?: true
    current_product_id?: true
    related_product_id?: true
  }

  export type RelatedSumAggregateInputType = {
    id?: true
    current_product_id?: true
    related_product_id?: true
  }

  export type RelatedMinAggregateInputType = {
    id?: true
    current_product_id?: true
    related_product_id?: true
  }

  export type RelatedMaxAggregateInputType = {
    id?: true
    current_product_id?: true
    related_product_id?: true
  }

  export type RelatedCountAggregateInputType = {
    id?: true
    current_product_id?: true
    related_product_id?: true
    _all?: true
  }

  export type RelatedAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which related to aggregate.
     */
    where?: relatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relateds to fetch.
     */
    orderBy?: relatedOrderByWithRelationInput | relatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: relatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relateds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned relateds
    **/
    _count?: true | RelatedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelatedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelatedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelatedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelatedMaxAggregateInputType
  }

  export type GetRelatedAggregateType<T extends RelatedAggregateArgs> = {
        [P in keyof T & keyof AggregateRelated]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelated[P]>
      : GetScalarType<T[P], AggregateRelated[P]>
  }




  export type relatedGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: relatedWhereInput
    orderBy?: relatedOrderByWithAggregationInput | relatedOrderByWithAggregationInput[]
    by: RelatedScalarFieldEnum[] | RelatedScalarFieldEnum
    having?: relatedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelatedCountAggregateInputType | true
    _avg?: RelatedAvgAggregateInputType
    _sum?: RelatedSumAggregateInputType
    _min?: RelatedMinAggregateInputType
    _max?: RelatedMaxAggregateInputType
  }


  export type RelatedGroupByOutputType = {
    id: number
    current_product_id: number
    related_product_id: number
    _count: RelatedCountAggregateOutputType | null
    _avg: RelatedAvgAggregateOutputType | null
    _sum: RelatedSumAggregateOutputType | null
    _min: RelatedMinAggregateOutputType | null
    _max: RelatedMaxAggregateOutputType | null
  }

  type GetRelatedGroupByPayload<T extends relatedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelatedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelatedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelatedGroupByOutputType[P]>
            : GetScalarType<T[P], RelatedGroupByOutputType[P]>
        }
      >
    >


  export type relatedSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    current_product_id?: boolean
    related_product_id?: boolean
    product1?: boolean | productArgs<ExtArgs>
  }, ExtArgs["result"]["related"]>

  export type relatedSelectScalar = {
    id?: boolean
    current_product_id?: boolean
    related_product_id?: boolean
  }

  export type relatedInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product1?: boolean | productArgs<ExtArgs>
  }


  type relatedGetPayload<S extends boolean | null | undefined | relatedArgs> = $Types.GetResult<relatedPayload, S>

  type relatedCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<relatedFindManyArgs, 'select' | 'include'> & {
      select?: RelatedCountAggregateInputType | true
    }

  export interface relatedDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['related'], meta: { name: 'related' } }
    /**
     * Find zero or one Related that matches the filter.
     * @param {relatedFindUniqueArgs} args - Arguments to find a Related
     * @example
     * // Get one Related
     * const related = await prisma.related.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends relatedFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, relatedFindUniqueArgs<ExtArgs>>
    ): Prisma__relatedClient<$Types.GetResult<relatedPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Related that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {relatedFindUniqueOrThrowArgs} args - Arguments to find a Related
     * @example
     * // Get one Related
     * const related = await prisma.related.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends relatedFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, relatedFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__relatedClient<$Types.GetResult<relatedPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Related that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relatedFindFirstArgs} args - Arguments to find a Related
     * @example
     * // Get one Related
     * const related = await prisma.related.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends relatedFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, relatedFindFirstArgs<ExtArgs>>
    ): Prisma__relatedClient<$Types.GetResult<relatedPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Related that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relatedFindFirstOrThrowArgs} args - Arguments to find a Related
     * @example
     * // Get one Related
     * const related = await prisma.related.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends relatedFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, relatedFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__relatedClient<$Types.GetResult<relatedPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Relateds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relatedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Relateds
     * const relateds = await prisma.related.findMany()
     * 
     * // Get first 10 Relateds
     * const relateds = await prisma.related.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relatedWithIdOnly = await prisma.related.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends relatedFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, relatedFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<relatedPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Related.
     * @param {relatedCreateArgs} args - Arguments to create a Related.
     * @example
     * // Create one Related
     * const Related = await prisma.related.create({
     *   data: {
     *     // ... data to create a Related
     *   }
     * })
     * 
    **/
    create<T extends relatedCreateArgs<ExtArgs>>(
      args: SelectSubset<T, relatedCreateArgs<ExtArgs>>
    ): Prisma__relatedClient<$Types.GetResult<relatedPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Relateds.
     *     @param {relatedCreateManyArgs} args - Arguments to create many Relateds.
     *     @example
     *     // Create many Relateds
     *     const related = await prisma.related.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends relatedCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, relatedCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Related.
     * @param {relatedDeleteArgs} args - Arguments to delete one Related.
     * @example
     * // Delete one Related
     * const Related = await prisma.related.delete({
     *   where: {
     *     // ... filter to delete one Related
     *   }
     * })
     * 
    **/
    delete<T extends relatedDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, relatedDeleteArgs<ExtArgs>>
    ): Prisma__relatedClient<$Types.GetResult<relatedPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Related.
     * @param {relatedUpdateArgs} args - Arguments to update one Related.
     * @example
     * // Update one Related
     * const related = await prisma.related.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends relatedUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, relatedUpdateArgs<ExtArgs>>
    ): Prisma__relatedClient<$Types.GetResult<relatedPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Relateds.
     * @param {relatedDeleteManyArgs} args - Arguments to filter Relateds to delete.
     * @example
     * // Delete a few Relateds
     * const { count } = await prisma.related.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends relatedDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, relatedDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relateds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relatedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Relateds
     * const related = await prisma.related.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends relatedUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, relatedUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Related.
     * @param {relatedUpsertArgs} args - Arguments to update or create a Related.
     * @example
     * // Update or create a Related
     * const related = await prisma.related.upsert({
     *   create: {
     *     // ... data to create a Related
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Related we want to update
     *   }
     * })
    **/
    upsert<T extends relatedUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, relatedUpsertArgs<ExtArgs>>
    ): Prisma__relatedClient<$Types.GetResult<relatedPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Relateds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relatedCountArgs} args - Arguments to filter Relateds to count.
     * @example
     * // Count the number of Relateds
     * const count = await prisma.related.count({
     *   where: {
     *     // ... the filter for the Relateds we want to count
     *   }
     * })
    **/
    count<T extends relatedCountArgs>(
      args?: Subset<T, relatedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelatedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Related.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelatedAggregateArgs>(args: Subset<T, RelatedAggregateArgs>): Prisma.PrismaPromise<GetRelatedAggregateType<T>>

    /**
     * Group by Related.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relatedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends relatedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: relatedGroupByArgs['orderBy'] }
        : { orderBy?: relatedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, relatedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelatedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the related model
   */
  readonly fields: relatedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for related.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__relatedClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product1<T extends productArgs<ExtArgs> = {}>(args?: Subset<T, productArgs<ExtArgs>>): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the related model
   */ 
  interface relatedFieldRefs {
    readonly id: FieldRef<"related", 'Int'>
    readonly current_product_id: FieldRef<"related", 'Int'>
    readonly related_product_id: FieldRef<"related", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * related findUnique
   */
  export type relatedFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
    /**
     * Filter, which related to fetch.
     */
    where: relatedWhereUniqueInput
  }


  /**
   * related findUniqueOrThrow
   */
  export type relatedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
    /**
     * Filter, which related to fetch.
     */
    where: relatedWhereUniqueInput
  }


  /**
   * related findFirst
   */
  export type relatedFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
    /**
     * Filter, which related to fetch.
     */
    where?: relatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relateds to fetch.
     */
    orderBy?: relatedOrderByWithRelationInput | relatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for relateds.
     */
    cursor?: relatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relateds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of relateds.
     */
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }


  /**
   * related findFirstOrThrow
   */
  export type relatedFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
    /**
     * Filter, which related to fetch.
     */
    where?: relatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relateds to fetch.
     */
    orderBy?: relatedOrderByWithRelationInput | relatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for relateds.
     */
    cursor?: relatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relateds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of relateds.
     */
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }


  /**
   * related findMany
   */
  export type relatedFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
    /**
     * Filter, which relateds to fetch.
     */
    where?: relatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relateds to fetch.
     */
    orderBy?: relatedOrderByWithRelationInput | relatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing relateds.
     */
    cursor?: relatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relateds.
     */
    skip?: number
    distinct?: RelatedScalarFieldEnum | RelatedScalarFieldEnum[]
  }


  /**
   * related create
   */
  export type relatedCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
    /**
     * The data needed to create a related.
     */
    data: XOR<relatedCreateInput, relatedUncheckedCreateInput>
  }


  /**
   * related createMany
   */
  export type relatedCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many relateds.
     */
    data: relatedCreateManyInput | relatedCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * related update
   */
  export type relatedUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
    /**
     * The data needed to update a related.
     */
    data: XOR<relatedUpdateInput, relatedUncheckedUpdateInput>
    /**
     * Choose, which related to update.
     */
    where: relatedWhereUniqueInput
  }


  /**
   * related updateMany
   */
  export type relatedUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update relateds.
     */
    data: XOR<relatedUpdateManyMutationInput, relatedUncheckedUpdateManyInput>
    /**
     * Filter which relateds to update
     */
    where?: relatedWhereInput
  }


  /**
   * related upsert
   */
  export type relatedUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
    /**
     * The filter to search for the related to update in case it exists.
     */
    where: relatedWhereUniqueInput
    /**
     * In case the related found by the `where` argument doesn't exist, create a new related with this data.
     */
    create: XOR<relatedCreateInput, relatedUncheckedCreateInput>
    /**
     * In case the related was found with the provided `where` argument, update it with this data.
     */
    update: XOR<relatedUpdateInput, relatedUncheckedUpdateInput>
  }


  /**
   * related delete
   */
  export type relatedDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
    /**
     * Filter which related to delete.
     */
    where: relatedWhereUniqueInput
  }


  /**
   * related deleteMany
   */
  export type relatedDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which relateds to delete
     */
    where?: relatedWhereInput
  }


  /**
   * related without action
   */
  export type relatedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the related
     */
    select?: relatedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: relatedInclude<ExtArgs> | null
  }



  /**
   * Model feature
   */


  export type AggregateFeature = {
    _count: FeatureCountAggregateOutputType | null
    _avg: FeatureAvgAggregateOutputType | null
    _sum: FeatureSumAggregateOutputType | null
    _min: FeatureMinAggregateOutputType | null
    _max: FeatureMaxAggregateOutputType | null
  }

  export type FeatureAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type FeatureSumAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type FeatureMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    feature: string | null
    value: string | null
  }

  export type FeatureMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    feature: string | null
    value: string | null
  }

  export type FeatureCountAggregateOutputType = {
    id: number
    product_id: number
    feature: number
    value: number
    _all: number
  }


  export type FeatureAvgAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type FeatureSumAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type FeatureMinAggregateInputType = {
    id?: true
    product_id?: true
    feature?: true
    value?: true
  }

  export type FeatureMaxAggregateInputType = {
    id?: true
    product_id?: true
    feature?: true
    value?: true
  }

  export type FeatureCountAggregateInputType = {
    id?: true
    product_id?: true
    feature?: true
    value?: true
    _all?: true
  }

  export type FeatureAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which feature to aggregate.
     */
    where?: featureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of features to fetch.
     */
    orderBy?: featureOrderByWithRelationInput | featureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: featureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned features
    **/
    _count?: true | FeatureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeatureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeatureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeatureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeatureMaxAggregateInputType
  }

  export type GetFeatureAggregateType<T extends FeatureAggregateArgs> = {
        [P in keyof T & keyof AggregateFeature]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeature[P]>
      : GetScalarType<T[P], AggregateFeature[P]>
  }




  export type featureGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: featureWhereInput
    orderBy?: featureOrderByWithAggregationInput | featureOrderByWithAggregationInput[]
    by: FeatureScalarFieldEnum[] | FeatureScalarFieldEnum
    having?: featureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeatureCountAggregateInputType | true
    _avg?: FeatureAvgAggregateInputType
    _sum?: FeatureSumAggregateInputType
    _min?: FeatureMinAggregateInputType
    _max?: FeatureMaxAggregateInputType
  }


  export type FeatureGroupByOutputType = {
    id: number
    product_id: number
    feature: string
    value: string | null
    _count: FeatureCountAggregateOutputType | null
    _avg: FeatureAvgAggregateOutputType | null
    _sum: FeatureSumAggregateOutputType | null
    _min: FeatureMinAggregateOutputType | null
    _max: FeatureMaxAggregateOutputType | null
  }

  type GetFeatureGroupByPayload<T extends featureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeatureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeatureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeatureGroupByOutputType[P]>
            : GetScalarType<T[P], FeatureGroupByOutputType[P]>
        }
      >
    >


  export type featureSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    feature?: boolean
    value?: boolean
    product?: boolean | productArgs<ExtArgs>
  }, ExtArgs["result"]["feature"]>

  export type featureSelectScalar = {
    id?: boolean
    product_id?: boolean
    feature?: boolean
    value?: boolean
  }

  export type featureInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | productArgs<ExtArgs>
  }


  type featureGetPayload<S extends boolean | null | undefined | featureArgs> = $Types.GetResult<featurePayload, S>

  type featureCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<featureFindManyArgs, 'select' | 'include'> & {
      select?: FeatureCountAggregateInputType | true
    }

  export interface featureDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['feature'], meta: { name: 'feature' } }
    /**
     * Find zero or one Feature that matches the filter.
     * @param {featureFindUniqueArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends featureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, featureFindUniqueArgs<ExtArgs>>
    ): Prisma__featureClient<$Types.GetResult<featurePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Feature that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {featureFindUniqueOrThrowArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends featureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, featureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__featureClient<$Types.GetResult<featurePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Feature that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {featureFindFirstArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends featureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, featureFindFirstArgs<ExtArgs>>
    ): Prisma__featureClient<$Types.GetResult<featurePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Feature that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {featureFindFirstOrThrowArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends featureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, featureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__featureClient<$Types.GetResult<featurePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Features that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {featureFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Features
     * const features = await prisma.feature.findMany()
     * 
     * // Get first 10 Features
     * const features = await prisma.feature.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const featureWithIdOnly = await prisma.feature.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends featureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, featureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<featurePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Feature.
     * @param {featureCreateArgs} args - Arguments to create a Feature.
     * @example
     * // Create one Feature
     * const Feature = await prisma.feature.create({
     *   data: {
     *     // ... data to create a Feature
     *   }
     * })
     * 
    **/
    create<T extends featureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, featureCreateArgs<ExtArgs>>
    ): Prisma__featureClient<$Types.GetResult<featurePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Features.
     *     @param {featureCreateManyArgs} args - Arguments to create many Features.
     *     @example
     *     // Create many Features
     *     const feature = await prisma.feature.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends featureCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, featureCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Feature.
     * @param {featureDeleteArgs} args - Arguments to delete one Feature.
     * @example
     * // Delete one Feature
     * const Feature = await prisma.feature.delete({
     *   where: {
     *     // ... filter to delete one Feature
     *   }
     * })
     * 
    **/
    delete<T extends featureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, featureDeleteArgs<ExtArgs>>
    ): Prisma__featureClient<$Types.GetResult<featurePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Feature.
     * @param {featureUpdateArgs} args - Arguments to update one Feature.
     * @example
     * // Update one Feature
     * const feature = await prisma.feature.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends featureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, featureUpdateArgs<ExtArgs>>
    ): Prisma__featureClient<$Types.GetResult<featurePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Features.
     * @param {featureDeleteManyArgs} args - Arguments to filter Features to delete.
     * @example
     * // Delete a few Features
     * const { count } = await prisma.feature.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends featureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, featureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Features.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {featureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Features
     * const feature = await prisma.feature.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends featureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, featureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feature.
     * @param {featureUpsertArgs} args - Arguments to update or create a Feature.
     * @example
     * // Update or create a Feature
     * const feature = await prisma.feature.upsert({
     *   create: {
     *     // ... data to create a Feature
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feature we want to update
     *   }
     * })
    **/
    upsert<T extends featureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, featureUpsertArgs<ExtArgs>>
    ): Prisma__featureClient<$Types.GetResult<featurePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Features.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {featureCountArgs} args - Arguments to filter Features to count.
     * @example
     * // Count the number of Features
     * const count = await prisma.feature.count({
     *   where: {
     *     // ... the filter for the Features we want to count
     *   }
     * })
    **/
    count<T extends featureCountArgs>(
      args?: Subset<T, featureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeatureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeatureAggregateArgs>(args: Subset<T, FeatureAggregateArgs>): Prisma.PrismaPromise<GetFeatureAggregateType<T>>

    /**
     * Group by Feature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {featureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends featureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: featureGroupByArgs['orderBy'] }
        : { orderBy?: featureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, featureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the feature model
   */
  readonly fields: featureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for feature.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__featureClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends productArgs<ExtArgs> = {}>(args?: Subset<T, productArgs<ExtArgs>>): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the feature model
   */ 
  interface featureFieldRefs {
    readonly id: FieldRef<"feature", 'Int'>
    readonly product_id: FieldRef<"feature", 'Int'>
    readonly feature: FieldRef<"feature", 'String'>
    readonly value: FieldRef<"feature", 'String'>
  }
    

  // Custom InputTypes

  /**
   * feature findUnique
   */
  export type featureFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
    /**
     * Filter, which feature to fetch.
     */
    where: featureWhereUniqueInput
  }


  /**
   * feature findUniqueOrThrow
   */
  export type featureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
    /**
     * Filter, which feature to fetch.
     */
    where: featureWhereUniqueInput
  }


  /**
   * feature findFirst
   */
  export type featureFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
    /**
     * Filter, which feature to fetch.
     */
    where?: featureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of features to fetch.
     */
    orderBy?: featureOrderByWithRelationInput | featureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for features.
     */
    cursor?: featureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of features.
     */
    distinct?: FeatureScalarFieldEnum | FeatureScalarFieldEnum[]
  }


  /**
   * feature findFirstOrThrow
   */
  export type featureFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
    /**
     * Filter, which feature to fetch.
     */
    where?: featureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of features to fetch.
     */
    orderBy?: featureOrderByWithRelationInput | featureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for features.
     */
    cursor?: featureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of features.
     */
    distinct?: FeatureScalarFieldEnum | FeatureScalarFieldEnum[]
  }


  /**
   * feature findMany
   */
  export type featureFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
    /**
     * Filter, which features to fetch.
     */
    where?: featureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of features to fetch.
     */
    orderBy?: featureOrderByWithRelationInput | featureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing features.
     */
    cursor?: featureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` features.
     */
    skip?: number
    distinct?: FeatureScalarFieldEnum | FeatureScalarFieldEnum[]
  }


  /**
   * feature create
   */
  export type featureCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
    /**
     * The data needed to create a feature.
     */
    data: XOR<featureCreateInput, featureUncheckedCreateInput>
  }


  /**
   * feature createMany
   */
  export type featureCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many features.
     */
    data: featureCreateManyInput | featureCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * feature update
   */
  export type featureUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
    /**
     * The data needed to update a feature.
     */
    data: XOR<featureUpdateInput, featureUncheckedUpdateInput>
    /**
     * Choose, which feature to update.
     */
    where: featureWhereUniqueInput
  }


  /**
   * feature updateMany
   */
  export type featureUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update features.
     */
    data: XOR<featureUpdateManyMutationInput, featureUncheckedUpdateManyInput>
    /**
     * Filter which features to update
     */
    where?: featureWhereInput
  }


  /**
   * feature upsert
   */
  export type featureUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
    /**
     * The filter to search for the feature to update in case it exists.
     */
    where: featureWhereUniqueInput
    /**
     * In case the feature found by the `where` argument doesn't exist, create a new feature with this data.
     */
    create: XOR<featureCreateInput, featureUncheckedCreateInput>
    /**
     * In case the feature was found with the provided `where` argument, update it with this data.
     */
    update: XOR<featureUpdateInput, featureUncheckedUpdateInput>
  }


  /**
   * feature delete
   */
  export type featureDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
    /**
     * Filter which feature to delete.
     */
    where: featureWhereUniqueInput
  }


  /**
   * feature deleteMany
   */
  export type featureDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which features to delete
     */
    where?: featureWhereInput
  }


  /**
   * feature without action
   */
  export type featureArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feature
     */
    select?: featureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: featureInclude<ExtArgs> | null
  }



  /**
   * Model styles
   */


  export type AggregateStyles = {
    _count: StylesCountAggregateOutputType | null
    _avg: StylesAvgAggregateOutputType | null
    _sum: StylesSumAggregateOutputType | null
    _min: StylesMinAggregateOutputType | null
    _max: StylesMaxAggregateOutputType | null
  }

  export type StylesAvgAggregateOutputType = {
    id: number | null
    productId: number | null
    sale_price: Decimal | null
    original_price: Decimal | null
  }

  export type StylesSumAggregateOutputType = {
    id: number | null
    productId: number | null
    sale_price: Decimal | null
    original_price: Decimal | null
  }

  export type StylesMinAggregateOutputType = {
    id: number | null
    productId: number | null
    name: string | null
    sale_price: Decimal | null
    original_price: Decimal | null
    default_style: boolean | null
  }

  export type StylesMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    name: string | null
    sale_price: Decimal | null
    original_price: Decimal | null
    default_style: boolean | null
  }

  export type StylesCountAggregateOutputType = {
    id: number
    productId: number
    name: number
    sale_price: number
    original_price: number
    default_style: number
    _all: number
  }


  export type StylesAvgAggregateInputType = {
    id?: true
    productId?: true
    sale_price?: true
    original_price?: true
  }

  export type StylesSumAggregateInputType = {
    id?: true
    productId?: true
    sale_price?: true
    original_price?: true
  }

  export type StylesMinAggregateInputType = {
    id?: true
    productId?: true
    name?: true
    sale_price?: true
    original_price?: true
    default_style?: true
  }

  export type StylesMaxAggregateInputType = {
    id?: true
    productId?: true
    name?: true
    sale_price?: true
    original_price?: true
    default_style?: true
  }

  export type StylesCountAggregateInputType = {
    id?: true
    productId?: true
    name?: true
    sale_price?: true
    original_price?: true
    default_style?: true
    _all?: true
  }

  export type StylesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which styles to aggregate.
     */
    where?: stylesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of styles to fetch.
     */
    orderBy?: stylesOrderByWithRelationInput | stylesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: stylesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned styles
    **/
    _count?: true | StylesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StylesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StylesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StylesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StylesMaxAggregateInputType
  }

  export type GetStylesAggregateType<T extends StylesAggregateArgs> = {
        [P in keyof T & keyof AggregateStyles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStyles[P]>
      : GetScalarType<T[P], AggregateStyles[P]>
  }




  export type stylesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: stylesWhereInput
    orderBy?: stylesOrderByWithAggregationInput | stylesOrderByWithAggregationInput[]
    by: StylesScalarFieldEnum[] | StylesScalarFieldEnum
    having?: stylesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StylesCountAggregateInputType | true
    _avg?: StylesAvgAggregateInputType
    _sum?: StylesSumAggregateInputType
    _min?: StylesMinAggregateInputType
    _max?: StylesMaxAggregateInputType
  }


  export type StylesGroupByOutputType = {
    id: number
    productId: number
    name: string
    sale_price: Decimal | null
    original_price: Decimal | null
    default_style: boolean
    _count: StylesCountAggregateOutputType | null
    _avg: StylesAvgAggregateOutputType | null
    _sum: StylesSumAggregateOutputType | null
    _min: StylesMinAggregateOutputType | null
    _max: StylesMaxAggregateOutputType | null
  }

  type GetStylesGroupByPayload<T extends stylesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StylesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StylesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StylesGroupByOutputType[P]>
            : GetScalarType<T[P], StylesGroupByOutputType[P]>
        }
      >
    >


  export type stylesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    name?: boolean
    sale_price?: boolean
    original_price?: boolean
    default_style?: boolean
    product?: boolean | productArgs<ExtArgs>
    photos?: boolean | styles$photosArgs<ExtArgs>
    sku?: boolean | styles$skuArgs<ExtArgs>
    _count?: boolean | StylesCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["styles"]>

  export type stylesSelectScalar = {
    id?: boolean
    productId?: boolean
    name?: boolean
    sale_price?: boolean
    original_price?: boolean
    default_style?: boolean
  }

  export type stylesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | productArgs<ExtArgs>
    photos?: boolean | styles$photosArgs<ExtArgs>
    sku?: boolean | styles$skuArgs<ExtArgs>
    _count?: boolean | StylesCountOutputTypeArgs<ExtArgs>
  }


  type stylesGetPayload<S extends boolean | null | undefined | stylesArgs> = $Types.GetResult<stylesPayload, S>

  type stylesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<stylesFindManyArgs, 'select' | 'include'> & {
      select?: StylesCountAggregateInputType | true
    }

  export interface stylesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['styles'], meta: { name: 'styles' } }
    /**
     * Find zero or one Styles that matches the filter.
     * @param {stylesFindUniqueArgs} args - Arguments to find a Styles
     * @example
     * // Get one Styles
     * const styles = await prisma.styles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends stylesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, stylesFindUniqueArgs<ExtArgs>>
    ): Prisma__stylesClient<$Types.GetResult<stylesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Styles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {stylesFindUniqueOrThrowArgs} args - Arguments to find a Styles
     * @example
     * // Get one Styles
     * const styles = await prisma.styles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends stylesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, stylesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__stylesClient<$Types.GetResult<stylesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Styles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stylesFindFirstArgs} args - Arguments to find a Styles
     * @example
     * // Get one Styles
     * const styles = await prisma.styles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends stylesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, stylesFindFirstArgs<ExtArgs>>
    ): Prisma__stylesClient<$Types.GetResult<stylesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Styles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stylesFindFirstOrThrowArgs} args - Arguments to find a Styles
     * @example
     * // Get one Styles
     * const styles = await prisma.styles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends stylesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, stylesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__stylesClient<$Types.GetResult<stylesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Styles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stylesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Styles
     * const styles = await prisma.styles.findMany()
     * 
     * // Get first 10 Styles
     * const styles = await prisma.styles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stylesWithIdOnly = await prisma.styles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends stylesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, stylesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<stylesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Styles.
     * @param {stylesCreateArgs} args - Arguments to create a Styles.
     * @example
     * // Create one Styles
     * const Styles = await prisma.styles.create({
     *   data: {
     *     // ... data to create a Styles
     *   }
     * })
     * 
    **/
    create<T extends stylesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, stylesCreateArgs<ExtArgs>>
    ): Prisma__stylesClient<$Types.GetResult<stylesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Styles.
     *     @param {stylesCreateManyArgs} args - Arguments to create many Styles.
     *     @example
     *     // Create many Styles
     *     const styles = await prisma.styles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends stylesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, stylesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Styles.
     * @param {stylesDeleteArgs} args - Arguments to delete one Styles.
     * @example
     * // Delete one Styles
     * const Styles = await prisma.styles.delete({
     *   where: {
     *     // ... filter to delete one Styles
     *   }
     * })
     * 
    **/
    delete<T extends stylesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, stylesDeleteArgs<ExtArgs>>
    ): Prisma__stylesClient<$Types.GetResult<stylesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Styles.
     * @param {stylesUpdateArgs} args - Arguments to update one Styles.
     * @example
     * // Update one Styles
     * const styles = await prisma.styles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends stylesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, stylesUpdateArgs<ExtArgs>>
    ): Prisma__stylesClient<$Types.GetResult<stylesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Styles.
     * @param {stylesDeleteManyArgs} args - Arguments to filter Styles to delete.
     * @example
     * // Delete a few Styles
     * const { count } = await prisma.styles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends stylesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, stylesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Styles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stylesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Styles
     * const styles = await prisma.styles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends stylesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, stylesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Styles.
     * @param {stylesUpsertArgs} args - Arguments to update or create a Styles.
     * @example
     * // Update or create a Styles
     * const styles = await prisma.styles.upsert({
     *   create: {
     *     // ... data to create a Styles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Styles we want to update
     *   }
     * })
    **/
    upsert<T extends stylesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, stylesUpsertArgs<ExtArgs>>
    ): Prisma__stylesClient<$Types.GetResult<stylesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Styles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stylesCountArgs} args - Arguments to filter Styles to count.
     * @example
     * // Count the number of Styles
     * const count = await prisma.styles.count({
     *   where: {
     *     // ... the filter for the Styles we want to count
     *   }
     * })
    **/
    count<T extends stylesCountArgs>(
      args?: Subset<T, stylesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StylesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Styles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StylesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StylesAggregateArgs>(args: Subset<T, StylesAggregateArgs>): Prisma.PrismaPromise<GetStylesAggregateType<T>>

    /**
     * Group by Styles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stylesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends stylesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: stylesGroupByArgs['orderBy'] }
        : { orderBy?: stylesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, stylesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStylesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the styles model
   */
  readonly fields: stylesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for styles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__stylesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends productArgs<ExtArgs> = {}>(args?: Subset<T, productArgs<ExtArgs>>): Prisma__productClient<$Types.GetResult<productPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    photos<T extends styles$photosArgs<ExtArgs> = {}>(args?: Subset<T, styles$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<photosPayload<ExtArgs>, T, 'findMany'>| Null>;

    sku<T extends styles$skuArgs<ExtArgs> = {}>(args?: Subset<T, styles$skuArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<skuPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the styles model
   */ 
  interface stylesFieldRefs {
    readonly id: FieldRef<"styles", 'Int'>
    readonly productId: FieldRef<"styles", 'Int'>
    readonly name: FieldRef<"styles", 'String'>
    readonly sale_price: FieldRef<"styles", 'Decimal'>
    readonly original_price: FieldRef<"styles", 'Decimal'>
    readonly default_style: FieldRef<"styles", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * styles findUnique
   */
  export type stylesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
    /**
     * Filter, which styles to fetch.
     */
    where: stylesWhereUniqueInput
  }


  /**
   * styles findUniqueOrThrow
   */
  export type stylesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
    /**
     * Filter, which styles to fetch.
     */
    where: stylesWhereUniqueInput
  }


  /**
   * styles findFirst
   */
  export type stylesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
    /**
     * Filter, which styles to fetch.
     */
    where?: stylesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of styles to fetch.
     */
    orderBy?: stylesOrderByWithRelationInput | stylesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for styles.
     */
    cursor?: stylesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of styles.
     */
    distinct?: StylesScalarFieldEnum | StylesScalarFieldEnum[]
  }


  /**
   * styles findFirstOrThrow
   */
  export type stylesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
    /**
     * Filter, which styles to fetch.
     */
    where?: stylesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of styles to fetch.
     */
    orderBy?: stylesOrderByWithRelationInput | stylesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for styles.
     */
    cursor?: stylesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of styles.
     */
    distinct?: StylesScalarFieldEnum | StylesScalarFieldEnum[]
  }


  /**
   * styles findMany
   */
  export type stylesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
    /**
     * Filter, which styles to fetch.
     */
    where?: stylesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of styles to fetch.
     */
    orderBy?: stylesOrderByWithRelationInput | stylesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing styles.
     */
    cursor?: stylesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` styles.
     */
    skip?: number
    distinct?: StylesScalarFieldEnum | StylesScalarFieldEnum[]
  }


  /**
   * styles create
   */
  export type stylesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
    /**
     * The data needed to create a styles.
     */
    data: XOR<stylesCreateInput, stylesUncheckedCreateInput>
  }


  /**
   * styles createMany
   */
  export type stylesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many styles.
     */
    data: stylesCreateManyInput | stylesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * styles update
   */
  export type stylesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
    /**
     * The data needed to update a styles.
     */
    data: XOR<stylesUpdateInput, stylesUncheckedUpdateInput>
    /**
     * Choose, which styles to update.
     */
    where: stylesWhereUniqueInput
  }


  /**
   * styles updateMany
   */
  export type stylesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update styles.
     */
    data: XOR<stylesUpdateManyMutationInput, stylesUncheckedUpdateManyInput>
    /**
     * Filter which styles to update
     */
    where?: stylesWhereInput
  }


  /**
   * styles upsert
   */
  export type stylesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
    /**
     * The filter to search for the styles to update in case it exists.
     */
    where: stylesWhereUniqueInput
    /**
     * In case the styles found by the `where` argument doesn't exist, create a new styles with this data.
     */
    create: XOR<stylesCreateInput, stylesUncheckedCreateInput>
    /**
     * In case the styles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<stylesUpdateInput, stylesUncheckedUpdateInput>
  }


  /**
   * styles delete
   */
  export type stylesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
    /**
     * Filter which styles to delete.
     */
    where: stylesWhereUniqueInput
  }


  /**
   * styles deleteMany
   */
  export type stylesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which styles to delete
     */
    where?: stylesWhereInput
  }


  /**
   * styles.photos
   */
  export type styles$photosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photos
     */
    select?: photosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: photosInclude<ExtArgs> | null
    where?: photosWhereInput
    orderBy?: photosOrderByWithRelationInput | photosOrderByWithRelationInput[]
    cursor?: photosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhotosScalarFieldEnum | PhotosScalarFieldEnum[]
  }


  /**
   * styles.sku
   */
  export type styles$skuArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
    where?: skuWhereInput
    orderBy?: skuOrderByWithRelationInput | skuOrderByWithRelationInput[]
    cursor?: skuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }


  /**
   * styles without action
   */
  export type stylesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the styles
     */
    select?: stylesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: stylesInclude<ExtArgs> | null
  }



  /**
   * Model sku
   */


  export type AggregateSku = {
    _count: SkuCountAggregateOutputType | null
    _avg: SkuAvgAggregateOutputType | null
    _sum: SkuSumAggregateOutputType | null
    _min: SkuMinAggregateOutputType | null
    _max: SkuMaxAggregateOutputType | null
  }

  export type SkuAvgAggregateOutputType = {
    id: number | null
    styleId: number | null
    quantity: number | null
  }

  export type SkuSumAggregateOutputType = {
    id: number | null
    styleId: number | null
    quantity: number | null
  }

  export type SkuMinAggregateOutputType = {
    id: number | null
    styleId: number | null
    size: string | null
    quantity: number | null
  }

  export type SkuMaxAggregateOutputType = {
    id: number | null
    styleId: number | null
    size: string | null
    quantity: number | null
  }

  export type SkuCountAggregateOutputType = {
    id: number
    styleId: number
    size: number
    quantity: number
    _all: number
  }


  export type SkuAvgAggregateInputType = {
    id?: true
    styleId?: true
    quantity?: true
  }

  export type SkuSumAggregateInputType = {
    id?: true
    styleId?: true
    quantity?: true
  }

  export type SkuMinAggregateInputType = {
    id?: true
    styleId?: true
    size?: true
    quantity?: true
  }

  export type SkuMaxAggregateInputType = {
    id?: true
    styleId?: true
    size?: true
    quantity?: true
  }

  export type SkuCountAggregateInputType = {
    id?: true
    styleId?: true
    size?: true
    quantity?: true
    _all?: true
  }

  export type SkuAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which sku to aggregate.
     */
    where?: skuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of skus to fetch.
     */
    orderBy?: skuOrderByWithRelationInput | skuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: skuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` skus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned skus
    **/
    _count?: true | SkuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkuMaxAggregateInputType
  }

  export type GetSkuAggregateType<T extends SkuAggregateArgs> = {
        [P in keyof T & keyof AggregateSku]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSku[P]>
      : GetScalarType<T[P], AggregateSku[P]>
  }




  export type skuGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: skuWhereInput
    orderBy?: skuOrderByWithAggregationInput | skuOrderByWithAggregationInput[]
    by: SkuScalarFieldEnum[] | SkuScalarFieldEnum
    having?: skuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkuCountAggregateInputType | true
    _avg?: SkuAvgAggregateInputType
    _sum?: SkuSumAggregateInputType
    _min?: SkuMinAggregateInputType
    _max?: SkuMaxAggregateInputType
  }


  export type SkuGroupByOutputType = {
    id: number
    styleId: number
    size: string
    quantity: number
    _count: SkuCountAggregateOutputType | null
    _avg: SkuAvgAggregateOutputType | null
    _sum: SkuSumAggregateOutputType | null
    _min: SkuMinAggregateOutputType | null
    _max: SkuMaxAggregateOutputType | null
  }

  type GetSkuGroupByPayload<T extends skuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkuGroupByOutputType[P]>
            : GetScalarType<T[P], SkuGroupByOutputType[P]>
        }
      >
    >


  export type skuSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    styleId?: boolean
    size?: boolean
    quantity?: boolean
    style?: boolean | stylesArgs<ExtArgs>
  }, ExtArgs["result"]["sku"]>

  export type skuSelectScalar = {
    id?: boolean
    styleId?: boolean
    size?: boolean
    quantity?: boolean
  }

  export type skuInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    style?: boolean | stylesArgs<ExtArgs>
  }


  type skuGetPayload<S extends boolean | null | undefined | skuArgs> = $Types.GetResult<skuPayload, S>

  type skuCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<skuFindManyArgs, 'select' | 'include'> & {
      select?: SkuCountAggregateInputType | true
    }

  export interface skuDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sku'], meta: { name: 'sku' } }
    /**
     * Find zero or one Sku that matches the filter.
     * @param {skuFindUniqueArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends skuFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, skuFindUniqueArgs<ExtArgs>>
    ): Prisma__skuClient<$Types.GetResult<skuPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sku that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {skuFindUniqueOrThrowArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends skuFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, skuFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__skuClient<$Types.GetResult<skuPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sku that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {skuFindFirstArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends skuFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, skuFindFirstArgs<ExtArgs>>
    ): Prisma__skuClient<$Types.GetResult<skuPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sku that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {skuFindFirstOrThrowArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends skuFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, skuFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__skuClient<$Types.GetResult<skuPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Skus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {skuFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skus
     * const skus = await prisma.sku.findMany()
     * 
     * // Get first 10 Skus
     * const skus = await prisma.sku.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skuWithIdOnly = await prisma.sku.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends skuFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, skuFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<skuPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sku.
     * @param {skuCreateArgs} args - Arguments to create a Sku.
     * @example
     * // Create one Sku
     * const Sku = await prisma.sku.create({
     *   data: {
     *     // ... data to create a Sku
     *   }
     * })
     * 
    **/
    create<T extends skuCreateArgs<ExtArgs>>(
      args: SelectSubset<T, skuCreateArgs<ExtArgs>>
    ): Prisma__skuClient<$Types.GetResult<skuPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Skus.
     *     @param {skuCreateManyArgs} args - Arguments to create many Skus.
     *     @example
     *     // Create many Skus
     *     const sku = await prisma.sku.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends skuCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, skuCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sku.
     * @param {skuDeleteArgs} args - Arguments to delete one Sku.
     * @example
     * // Delete one Sku
     * const Sku = await prisma.sku.delete({
     *   where: {
     *     // ... filter to delete one Sku
     *   }
     * })
     * 
    **/
    delete<T extends skuDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, skuDeleteArgs<ExtArgs>>
    ): Prisma__skuClient<$Types.GetResult<skuPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sku.
     * @param {skuUpdateArgs} args - Arguments to update one Sku.
     * @example
     * // Update one Sku
     * const sku = await prisma.sku.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends skuUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, skuUpdateArgs<ExtArgs>>
    ): Prisma__skuClient<$Types.GetResult<skuPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Skus.
     * @param {skuDeleteManyArgs} args - Arguments to filter Skus to delete.
     * @example
     * // Delete a few Skus
     * const { count } = await prisma.sku.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends skuDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, skuDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {skuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skus
     * const sku = await prisma.sku.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends skuUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, skuUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sku.
     * @param {skuUpsertArgs} args - Arguments to update or create a Sku.
     * @example
     * // Update or create a Sku
     * const sku = await prisma.sku.upsert({
     *   create: {
     *     // ... data to create a Sku
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sku we want to update
     *   }
     * })
    **/
    upsert<T extends skuUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, skuUpsertArgs<ExtArgs>>
    ): Prisma__skuClient<$Types.GetResult<skuPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Skus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {skuCountArgs} args - Arguments to filter Skus to count.
     * @example
     * // Count the number of Skus
     * const count = await prisma.sku.count({
     *   where: {
     *     // ... the filter for the Skus we want to count
     *   }
     * })
    **/
    count<T extends skuCountArgs>(
      args?: Subset<T, skuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sku.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkuAggregateArgs>(args: Subset<T, SkuAggregateArgs>): Prisma.PrismaPromise<GetSkuAggregateType<T>>

    /**
     * Group by Sku.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {skuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends skuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: skuGroupByArgs['orderBy'] }
        : { orderBy?: skuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, skuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sku model
   */
  readonly fields: skuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sku.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__skuClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    style<T extends stylesArgs<ExtArgs> = {}>(args?: Subset<T, stylesArgs<ExtArgs>>): Prisma__stylesClient<$Types.GetResult<stylesPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the sku model
   */ 
  interface skuFieldRefs {
    readonly id: FieldRef<"sku", 'Int'>
    readonly styleId: FieldRef<"sku", 'Int'>
    readonly size: FieldRef<"sku", 'String'>
    readonly quantity: FieldRef<"sku", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * sku findUnique
   */
  export type skuFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
    /**
     * Filter, which sku to fetch.
     */
    where: skuWhereUniqueInput
  }


  /**
   * sku findUniqueOrThrow
   */
  export type skuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
    /**
     * Filter, which sku to fetch.
     */
    where: skuWhereUniqueInput
  }


  /**
   * sku findFirst
   */
  export type skuFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
    /**
     * Filter, which sku to fetch.
     */
    where?: skuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of skus to fetch.
     */
    orderBy?: skuOrderByWithRelationInput | skuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for skus.
     */
    cursor?: skuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` skus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of skus.
     */
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }


  /**
   * sku findFirstOrThrow
   */
  export type skuFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
    /**
     * Filter, which sku to fetch.
     */
    where?: skuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of skus to fetch.
     */
    orderBy?: skuOrderByWithRelationInput | skuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for skus.
     */
    cursor?: skuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` skus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of skus.
     */
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }


  /**
   * sku findMany
   */
  export type skuFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
    /**
     * Filter, which skus to fetch.
     */
    where?: skuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of skus to fetch.
     */
    orderBy?: skuOrderByWithRelationInput | skuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing skus.
     */
    cursor?: skuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` skus.
     */
    skip?: number
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }


  /**
   * sku create
   */
  export type skuCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
    /**
     * The data needed to create a sku.
     */
    data: XOR<skuCreateInput, skuUncheckedCreateInput>
  }


  /**
   * sku createMany
   */
  export type skuCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many skus.
     */
    data: skuCreateManyInput | skuCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * sku update
   */
  export type skuUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
    /**
     * The data needed to update a sku.
     */
    data: XOR<skuUpdateInput, skuUncheckedUpdateInput>
    /**
     * Choose, which sku to update.
     */
    where: skuWhereUniqueInput
  }


  /**
   * sku updateMany
   */
  export type skuUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update skus.
     */
    data: XOR<skuUpdateManyMutationInput, skuUncheckedUpdateManyInput>
    /**
     * Filter which skus to update
     */
    where?: skuWhereInput
  }


  /**
   * sku upsert
   */
  export type skuUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
    /**
     * The filter to search for the sku to update in case it exists.
     */
    where: skuWhereUniqueInput
    /**
     * In case the sku found by the `where` argument doesn't exist, create a new sku with this data.
     */
    create: XOR<skuCreateInput, skuUncheckedCreateInput>
    /**
     * In case the sku was found with the provided `where` argument, update it with this data.
     */
    update: XOR<skuUpdateInput, skuUncheckedUpdateInput>
  }


  /**
   * sku delete
   */
  export type skuDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
    /**
     * Filter which sku to delete.
     */
    where: skuWhereUniqueInput
  }


  /**
   * sku deleteMany
   */
  export type skuDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which skus to delete
     */
    where?: skuWhereInput
  }


  /**
   * sku without action
   */
  export type skuArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sku
     */
    select?: skuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: skuInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PhotosScalarFieldEnum: {
    id: 'id',
    styleId: 'styleId',
    url: 'url',
    thumbnail_url: 'thumbnail_url'
  };

  export type PhotosScalarFieldEnum = (typeof PhotosScalarFieldEnum)[keyof typeof PhotosScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slogan: 'slogan',
    description: 'description',
    category: 'category',
    default_price: 'default_price'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const RelatedScalarFieldEnum: {
    id: 'id',
    current_product_id: 'current_product_id',
    related_product_id: 'related_product_id'
  };

  export type RelatedScalarFieldEnum = (typeof RelatedScalarFieldEnum)[keyof typeof RelatedScalarFieldEnum]


  export const FeatureScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    feature: 'feature',
    value: 'value'
  };

  export type FeatureScalarFieldEnum = (typeof FeatureScalarFieldEnum)[keyof typeof FeatureScalarFieldEnum]


  export const StylesScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    name: 'name',
    sale_price: 'sale_price',
    original_price: 'original_price',
    default_style: 'default_style'
  };

  export type StylesScalarFieldEnum = (typeof StylesScalarFieldEnum)[keyof typeof StylesScalarFieldEnum]


  export const SkuScalarFieldEnum: {
    id: 'id',
    styleId: 'styleId',
    size: 'size',
    quantity: 'quantity'
  };

  export type SkuScalarFieldEnum = (typeof SkuScalarFieldEnum)[keyof typeof SkuScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type photosWhereInput = {
    AND?: photosWhereInput | photosWhereInput[]
    OR?: photosWhereInput[]
    NOT?: photosWhereInput | photosWhereInput[]
    id?: IntFilter<"photos"> | number
    styleId?: IntFilter<"photos"> | number
    url?: StringFilter<"photos"> | string
    thumbnail_url?: StringFilter<"photos"> | string
    styles?: XOR<StylesRelationFilter, stylesWhereInput>
  }

  export type photosOrderByWithRelationInput = {
    id?: SortOrder
    styleId?: SortOrder
    url?: SortOrder
    thumbnail_url?: SortOrder
    styles?: stylesOrderByWithRelationInput
  }

  export type photosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: photosWhereInput | photosWhereInput[]
    OR?: photosWhereInput[]
    NOT?: photosWhereInput | photosWhereInput[]
    styleId?: IntFilter<"photos"> | number
    url?: StringFilter<"photos"> | string
    thumbnail_url?: StringFilter<"photos"> | string
    styles?: XOR<StylesRelationFilter, stylesWhereInput>
  }, "id">

  export type photosOrderByWithAggregationInput = {
    id?: SortOrder
    styleId?: SortOrder
    url?: SortOrder
    thumbnail_url?: SortOrder
    _count?: photosCountOrderByAggregateInput
    _avg?: photosAvgOrderByAggregateInput
    _max?: photosMaxOrderByAggregateInput
    _min?: photosMinOrderByAggregateInput
    _sum?: photosSumOrderByAggregateInput
  }

  export type photosScalarWhereWithAggregatesInput = {
    AND?: photosScalarWhereWithAggregatesInput | photosScalarWhereWithAggregatesInput[]
    OR?: photosScalarWhereWithAggregatesInput[]
    NOT?: photosScalarWhereWithAggregatesInput | photosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"photos"> | number
    styleId?: IntWithAggregatesFilter<"photos"> | number
    url?: StringWithAggregatesFilter<"photos"> | string
    thumbnail_url?: StringWithAggregatesFilter<"photos"> | string
  }

  export type productWhereInput = {
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    id?: IntFilter<"product"> | number
    name?: StringFilter<"product"> | string
    slogan?: StringFilter<"product"> | string
    description?: StringFilter<"product"> | string
    category?: StringFilter<"product"> | string
    default_price?: DecimalNullableFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    features?: FeatureListRelationFilter
    styles?: StylesListRelationFilter
    related?: RelatedListRelationFilter
  }

  export type productOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slogan?: SortOrder
    description?: SortOrder
    category?: SortOrder
    default_price?: SortOrderInput | SortOrder
    features?: featureOrderByRelationAggregateInput
    styles?: stylesOrderByRelationAggregateInput
    related?: relatedOrderByRelationAggregateInput
  }

  export type productWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    name?: StringFilter<"product"> | string
    slogan?: StringFilter<"product"> | string
    description?: StringFilter<"product"> | string
    category?: StringFilter<"product"> | string
    default_price?: DecimalNullableFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    features?: FeatureListRelationFilter
    styles?: StylesListRelationFilter
    related?: RelatedListRelationFilter
  }, "id">

  export type productOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slogan?: SortOrder
    description?: SortOrder
    category?: SortOrder
    default_price?: SortOrderInput | SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    OR?: productScalarWhereWithAggregatesInput[]
    NOT?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product"> | number
    name?: StringWithAggregatesFilter<"product"> | string
    slogan?: StringWithAggregatesFilter<"product"> | string
    description?: StringWithAggregatesFilter<"product"> | string
    category?: StringWithAggregatesFilter<"product"> | string
    default_price?: DecimalNullableWithAggregatesFilter<"product"> | Decimal | DecimalJsLike | number | string | null
  }

  export type relatedWhereInput = {
    AND?: relatedWhereInput | relatedWhereInput[]
    OR?: relatedWhereInput[]
    NOT?: relatedWhereInput | relatedWhereInput[]
    id?: IntFilter<"related"> | number
    current_product_id?: IntFilter<"related"> | number
    related_product_id?: IntFilter<"related"> | number
    product1?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type relatedOrderByWithRelationInput = {
    id?: SortOrder
    current_product_id?: SortOrder
    related_product_id?: SortOrder
    product1?: productOrderByWithRelationInput
  }

  export type relatedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: relatedWhereInput | relatedWhereInput[]
    OR?: relatedWhereInput[]
    NOT?: relatedWhereInput | relatedWhereInput[]
    current_product_id?: IntFilter<"related"> | number
    related_product_id?: IntFilter<"related"> | number
    product1?: XOR<ProductRelationFilter, productWhereInput>
  }, "id">

  export type relatedOrderByWithAggregationInput = {
    id?: SortOrder
    current_product_id?: SortOrder
    related_product_id?: SortOrder
    _count?: relatedCountOrderByAggregateInput
    _avg?: relatedAvgOrderByAggregateInput
    _max?: relatedMaxOrderByAggregateInput
    _min?: relatedMinOrderByAggregateInput
    _sum?: relatedSumOrderByAggregateInput
  }

  export type relatedScalarWhereWithAggregatesInput = {
    AND?: relatedScalarWhereWithAggregatesInput | relatedScalarWhereWithAggregatesInput[]
    OR?: relatedScalarWhereWithAggregatesInput[]
    NOT?: relatedScalarWhereWithAggregatesInput | relatedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"related"> | number
    current_product_id?: IntWithAggregatesFilter<"related"> | number
    related_product_id?: IntWithAggregatesFilter<"related"> | number
  }

  export type featureWhereInput = {
    AND?: featureWhereInput | featureWhereInput[]
    OR?: featureWhereInput[]
    NOT?: featureWhereInput | featureWhereInput[]
    id?: IntFilter<"feature"> | number
    product_id?: IntFilter<"feature"> | number
    feature?: StringFilter<"feature"> | string
    value?: StringNullableFilter<"feature"> | string | null
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type featureOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    feature?: SortOrder
    value?: SortOrderInput | SortOrder
    product?: productOrderByWithRelationInput
  }

  export type featureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: featureWhereInput | featureWhereInput[]
    OR?: featureWhereInput[]
    NOT?: featureWhereInput | featureWhereInput[]
    product_id?: IntFilter<"feature"> | number
    feature?: StringFilter<"feature"> | string
    value?: StringNullableFilter<"feature"> | string | null
    product?: XOR<ProductRelationFilter, productWhereInput>
  }, "id">

  export type featureOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    feature?: SortOrder
    value?: SortOrderInput | SortOrder
    _count?: featureCountOrderByAggregateInput
    _avg?: featureAvgOrderByAggregateInput
    _max?: featureMaxOrderByAggregateInput
    _min?: featureMinOrderByAggregateInput
    _sum?: featureSumOrderByAggregateInput
  }

  export type featureScalarWhereWithAggregatesInput = {
    AND?: featureScalarWhereWithAggregatesInput | featureScalarWhereWithAggregatesInput[]
    OR?: featureScalarWhereWithAggregatesInput[]
    NOT?: featureScalarWhereWithAggregatesInput | featureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"feature"> | number
    product_id?: IntWithAggregatesFilter<"feature"> | number
    feature?: StringWithAggregatesFilter<"feature"> | string
    value?: StringNullableWithAggregatesFilter<"feature"> | string | null
  }

  export type stylesWhereInput = {
    AND?: stylesWhereInput | stylesWhereInput[]
    OR?: stylesWhereInput[]
    NOT?: stylesWhereInput | stylesWhereInput[]
    id?: IntFilter<"styles"> | number
    productId?: IntFilter<"styles"> | number
    name?: StringFilter<"styles"> | string
    sale_price?: DecimalNullableFilter<"styles"> | Decimal | DecimalJsLike | number | string | null
    original_price?: DecimalNullableFilter<"styles"> | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFilter<"styles"> | boolean
    product?: XOR<ProductRelationFilter, productWhereInput>
    photos?: PhotosListRelationFilter
    sku?: SkuListRelationFilter
  }

  export type stylesOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    sale_price?: SortOrderInput | SortOrder
    original_price?: SortOrderInput | SortOrder
    default_style?: SortOrder
    product?: productOrderByWithRelationInput
    photos?: photosOrderByRelationAggregateInput
    sku?: skuOrderByRelationAggregateInput
  }

  export type stylesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: stylesWhereInput | stylesWhereInput[]
    OR?: stylesWhereInput[]
    NOT?: stylesWhereInput | stylesWhereInput[]
    productId?: IntFilter<"styles"> | number
    name?: StringFilter<"styles"> | string
    sale_price?: DecimalNullableFilter<"styles"> | Decimal | DecimalJsLike | number | string | null
    original_price?: DecimalNullableFilter<"styles"> | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFilter<"styles"> | boolean
    product?: XOR<ProductRelationFilter, productWhereInput>
    photos?: PhotosListRelationFilter
    sku?: SkuListRelationFilter
  }, "id">

  export type stylesOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    sale_price?: SortOrderInput | SortOrder
    original_price?: SortOrderInput | SortOrder
    default_style?: SortOrder
    _count?: stylesCountOrderByAggregateInput
    _avg?: stylesAvgOrderByAggregateInput
    _max?: stylesMaxOrderByAggregateInput
    _min?: stylesMinOrderByAggregateInput
    _sum?: stylesSumOrderByAggregateInput
  }

  export type stylesScalarWhereWithAggregatesInput = {
    AND?: stylesScalarWhereWithAggregatesInput | stylesScalarWhereWithAggregatesInput[]
    OR?: stylesScalarWhereWithAggregatesInput[]
    NOT?: stylesScalarWhereWithAggregatesInput | stylesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"styles"> | number
    productId?: IntWithAggregatesFilter<"styles"> | number
    name?: StringWithAggregatesFilter<"styles"> | string
    sale_price?: DecimalNullableWithAggregatesFilter<"styles"> | Decimal | DecimalJsLike | number | string | null
    original_price?: DecimalNullableWithAggregatesFilter<"styles"> | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolWithAggregatesFilter<"styles"> | boolean
  }

  export type skuWhereInput = {
    AND?: skuWhereInput | skuWhereInput[]
    OR?: skuWhereInput[]
    NOT?: skuWhereInput | skuWhereInput[]
    id?: IntFilter<"sku"> | number
    styleId?: IntFilter<"sku"> | number
    size?: StringFilter<"sku"> | string
    quantity?: IntFilter<"sku"> | number
    style?: XOR<StylesRelationFilter, stylesWhereInput>
  }

  export type skuOrderByWithRelationInput = {
    id?: SortOrder
    styleId?: SortOrder
    size?: SortOrder
    quantity?: SortOrder
    style?: stylesOrderByWithRelationInput
  }

  export type skuWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: skuWhereInput | skuWhereInput[]
    OR?: skuWhereInput[]
    NOT?: skuWhereInput | skuWhereInput[]
    styleId?: IntFilter<"sku"> | number
    size?: StringFilter<"sku"> | string
    quantity?: IntFilter<"sku"> | number
    style?: XOR<StylesRelationFilter, stylesWhereInput>
  }, "id">

  export type skuOrderByWithAggregationInput = {
    id?: SortOrder
    styleId?: SortOrder
    size?: SortOrder
    quantity?: SortOrder
    _count?: skuCountOrderByAggregateInput
    _avg?: skuAvgOrderByAggregateInput
    _max?: skuMaxOrderByAggregateInput
    _min?: skuMinOrderByAggregateInput
    _sum?: skuSumOrderByAggregateInput
  }

  export type skuScalarWhereWithAggregatesInput = {
    AND?: skuScalarWhereWithAggregatesInput | skuScalarWhereWithAggregatesInput[]
    OR?: skuScalarWhereWithAggregatesInput[]
    NOT?: skuScalarWhereWithAggregatesInput | skuScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"sku"> | number
    styleId?: IntWithAggregatesFilter<"sku"> | number
    size?: StringWithAggregatesFilter<"sku"> | string
    quantity?: IntWithAggregatesFilter<"sku"> | number
  }

  export type photosCreateInput = {
    url: string
    thumbnail_url: string
    styles: stylesCreateNestedOneWithoutPhotosInput
  }

  export type photosUncheckedCreateInput = {
    id?: number
    styleId: number
    url: string
    thumbnail_url: string
  }

  export type photosUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: StringFieldUpdateOperationsInput | string
    styles?: stylesUpdateOneRequiredWithoutPhotosNestedInput
  }

  export type photosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: StringFieldUpdateOperationsInput | string
  }

  export type photosCreateManyInput = {
    id?: number
    styleId: number
    url: string
    thumbnail_url: string
  }

  export type photosUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: StringFieldUpdateOperationsInput | string
  }

  export type photosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: StringFieldUpdateOperationsInput | string
  }

  export type productCreateInput = {
    name: string
    slogan: string
    description: string
    category: string
    default_price?: Decimal | DecimalJsLike | number | string | null
    features?: featureCreateNestedManyWithoutProductInput
    styles?: stylesCreateNestedManyWithoutProductInput
    related?: relatedCreateNestedManyWithoutProduct1Input
  }

  export type productUncheckedCreateInput = {
    id?: number
    name: string
    slogan: string
    description: string
    category: string
    default_price?: Decimal | DecimalJsLike | number | string | null
    features?: featureUncheckedCreateNestedManyWithoutProductInput
    styles?: stylesUncheckedCreateNestedManyWithoutProductInput
    related?: relatedUncheckedCreateNestedManyWithoutProduct1Input
  }

  export type productUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slogan?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    default_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    features?: featureUpdateManyWithoutProductNestedInput
    styles?: stylesUpdateManyWithoutProductNestedInput
    related?: relatedUpdateManyWithoutProduct1NestedInput
  }

  export type productUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slogan?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    default_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    features?: featureUncheckedUpdateManyWithoutProductNestedInput
    styles?: stylesUncheckedUpdateManyWithoutProductNestedInput
    related?: relatedUncheckedUpdateManyWithoutProduct1NestedInput
  }

  export type productCreateManyInput = {
    id?: number
    name: string
    slogan: string
    description: string
    category: string
    default_price?: Decimal | DecimalJsLike | number | string | null
  }

  export type productUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slogan?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    default_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type productUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slogan?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    default_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type relatedCreateInput = {
    related_product_id: number
    product1: productCreateNestedOneWithoutRelatedInput
  }

  export type relatedUncheckedCreateInput = {
    id?: number
    current_product_id: number
    related_product_id: number
  }

  export type relatedUpdateInput = {
    related_product_id?: IntFieldUpdateOperationsInput | number
    product1?: productUpdateOneRequiredWithoutRelatedNestedInput
  }

  export type relatedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    current_product_id?: IntFieldUpdateOperationsInput | number
    related_product_id?: IntFieldUpdateOperationsInput | number
  }

  export type relatedCreateManyInput = {
    id?: number
    current_product_id: number
    related_product_id: number
  }

  export type relatedUpdateManyMutationInput = {
    related_product_id?: IntFieldUpdateOperationsInput | number
  }

  export type relatedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    current_product_id?: IntFieldUpdateOperationsInput | number
    related_product_id?: IntFieldUpdateOperationsInput | number
  }

  export type featureCreateInput = {
    feature: string
    value?: string | null
    product: productCreateNestedOneWithoutFeaturesInput
  }

  export type featureUncheckedCreateInput = {
    id?: number
    product_id: number
    feature: string
    value?: string | null
  }

  export type featureUpdateInput = {
    feature?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    product?: productUpdateOneRequiredWithoutFeaturesNestedInput
  }

  export type featureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    feature?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type featureCreateManyInput = {
    id?: number
    product_id: number
    feature: string
    value?: string | null
  }

  export type featureUpdateManyMutationInput = {
    feature?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type featureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    feature?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type stylesCreateInput = {
    name: string
    sale_price?: Decimal | DecimalJsLike | number | string | null
    original_price?: Decimal | DecimalJsLike | number | string | null
    default_style: boolean
    product: productCreateNestedOneWithoutStylesInput
    photos?: photosCreateNestedManyWithoutStylesInput
    sku?: skuCreateNestedManyWithoutStyleInput
  }

  export type stylesUncheckedCreateInput = {
    id?: number
    productId: number
    name: string
    sale_price?: Decimal | DecimalJsLike | number | string | null
    original_price?: Decimal | DecimalJsLike | number | string | null
    default_style: boolean
    photos?: photosUncheckedCreateNestedManyWithoutStylesInput
    sku?: skuUncheckedCreateNestedManyWithoutStyleInput
  }

  export type stylesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
    product?: productUpdateOneRequiredWithoutStylesNestedInput
    photos?: photosUpdateManyWithoutStylesNestedInput
    sku?: skuUpdateManyWithoutStyleNestedInput
  }

  export type stylesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
    photos?: photosUncheckedUpdateManyWithoutStylesNestedInput
    sku?: skuUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type stylesCreateManyInput = {
    id?: number
    productId: number
    name: string
    sale_price?: Decimal | DecimalJsLike | number | string | null
    original_price?: Decimal | DecimalJsLike | number | string | null
    default_style: boolean
  }

  export type stylesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
  }

  export type stylesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
  }

  export type skuCreateInput = {
    size: string
    quantity: number
    style: stylesCreateNestedOneWithoutSkuInput
  }

  export type skuUncheckedCreateInput = {
    id?: number
    styleId: number
    size: string
    quantity: number
  }

  export type skuUpdateInput = {
    size?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    style?: stylesUpdateOneRequiredWithoutSkuNestedInput
  }

  export type skuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type skuCreateManyInput = {
    id?: number
    styleId: number
    size: string
    quantity: number
  }

  export type skuUpdateManyMutationInput = {
    size?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type skuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StylesRelationFilter = {
    is?: stylesWhereInput
    isNot?: stylesWhereInput
  }

  export type photosCountOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    url?: SortOrder
    thumbnail_url?: SortOrder
  }

  export type photosAvgOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
  }

  export type photosMaxOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    url?: SortOrder
    thumbnail_url?: SortOrder
  }

  export type photosMinOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    url?: SortOrder
    thumbnail_url?: SortOrder
  }

  export type photosSumOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type FeatureListRelationFilter = {
    every?: featureWhereInput
    some?: featureWhereInput
    none?: featureWhereInput
  }

  export type StylesListRelationFilter = {
    every?: stylesWhereInput
    some?: stylesWhereInput
    none?: stylesWhereInput
  }

  export type RelatedListRelationFilter = {
    every?: relatedWhereInput
    some?: relatedWhereInput
    none?: relatedWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type featureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type stylesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type relatedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slogan?: SortOrder
    description?: SortOrder
    category?: SortOrder
    default_price?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    id?: SortOrder
    default_price?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slogan?: SortOrder
    description?: SortOrder
    category?: SortOrder
    default_price?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slogan?: SortOrder
    description?: SortOrder
    category?: SortOrder
    default_price?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    id?: SortOrder
    default_price?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type ProductRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type relatedCountOrderByAggregateInput = {
    id?: SortOrder
    current_product_id?: SortOrder
    related_product_id?: SortOrder
  }

  export type relatedAvgOrderByAggregateInput = {
    id?: SortOrder
    current_product_id?: SortOrder
    related_product_id?: SortOrder
  }

  export type relatedMaxOrderByAggregateInput = {
    id?: SortOrder
    current_product_id?: SortOrder
    related_product_id?: SortOrder
  }

  export type relatedMinOrderByAggregateInput = {
    id?: SortOrder
    current_product_id?: SortOrder
    related_product_id?: SortOrder
  }

  export type relatedSumOrderByAggregateInput = {
    id?: SortOrder
    current_product_id?: SortOrder
    related_product_id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type featureCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    feature?: SortOrder
    value?: SortOrder
  }

  export type featureAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type featureMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    feature?: SortOrder
    value?: SortOrder
  }

  export type featureMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    feature?: SortOrder
    value?: SortOrder
  }

  export type featureSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PhotosListRelationFilter = {
    every?: photosWhereInput
    some?: photosWhereInput
    none?: photosWhereInput
  }

  export type SkuListRelationFilter = {
    every?: skuWhereInput
    some?: skuWhereInput
    none?: skuWhereInput
  }

  export type photosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type skuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type stylesCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    sale_price?: SortOrder
    original_price?: SortOrder
    default_style?: SortOrder
  }

  export type stylesAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sale_price?: SortOrder
    original_price?: SortOrder
  }

  export type stylesMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    sale_price?: SortOrder
    original_price?: SortOrder
    default_style?: SortOrder
  }

  export type stylesMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    sale_price?: SortOrder
    original_price?: SortOrder
    default_style?: SortOrder
  }

  export type stylesSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sale_price?: SortOrder
    original_price?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type skuCountOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    size?: SortOrder
    quantity?: SortOrder
  }

  export type skuAvgOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    quantity?: SortOrder
  }

  export type skuMaxOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    size?: SortOrder
    quantity?: SortOrder
  }

  export type skuMinOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    size?: SortOrder
    quantity?: SortOrder
  }

  export type skuSumOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    quantity?: SortOrder
  }

  export type stylesCreateNestedOneWithoutPhotosInput = {
    create?: XOR<stylesCreateWithoutPhotosInput, stylesUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: stylesCreateOrConnectWithoutPhotosInput
    connect?: stylesWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type stylesUpdateOneRequiredWithoutPhotosNestedInput = {
    create?: XOR<stylesCreateWithoutPhotosInput, stylesUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: stylesCreateOrConnectWithoutPhotosInput
    upsert?: stylesUpsertWithoutPhotosInput
    connect?: stylesWhereUniqueInput
    update?: XOR<XOR<stylesUpdateToOneWithWhereWithoutPhotosInput, stylesUpdateWithoutPhotosInput>, stylesUncheckedUpdateWithoutPhotosInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type featureCreateNestedManyWithoutProductInput = {
    create?: XOR<featureCreateWithoutProductInput, featureUncheckedCreateWithoutProductInput> | featureCreateWithoutProductInput[] | featureUncheckedCreateWithoutProductInput[]
    connectOrCreate?: featureCreateOrConnectWithoutProductInput | featureCreateOrConnectWithoutProductInput[]
    createMany?: featureCreateManyProductInputEnvelope
    connect?: featureWhereUniqueInput | featureWhereUniqueInput[]
  }

  export type stylesCreateNestedManyWithoutProductInput = {
    create?: XOR<stylesCreateWithoutProductInput, stylesUncheckedCreateWithoutProductInput> | stylesCreateWithoutProductInput[] | stylesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: stylesCreateOrConnectWithoutProductInput | stylesCreateOrConnectWithoutProductInput[]
    createMany?: stylesCreateManyProductInputEnvelope
    connect?: stylesWhereUniqueInput | stylesWhereUniqueInput[]
  }

  export type relatedCreateNestedManyWithoutProduct1Input = {
    create?: XOR<relatedCreateWithoutProduct1Input, relatedUncheckedCreateWithoutProduct1Input> | relatedCreateWithoutProduct1Input[] | relatedUncheckedCreateWithoutProduct1Input[]
    connectOrCreate?: relatedCreateOrConnectWithoutProduct1Input | relatedCreateOrConnectWithoutProduct1Input[]
    createMany?: relatedCreateManyProduct1InputEnvelope
    connect?: relatedWhereUniqueInput | relatedWhereUniqueInput[]
  }

  export type featureUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<featureCreateWithoutProductInput, featureUncheckedCreateWithoutProductInput> | featureCreateWithoutProductInput[] | featureUncheckedCreateWithoutProductInput[]
    connectOrCreate?: featureCreateOrConnectWithoutProductInput | featureCreateOrConnectWithoutProductInput[]
    createMany?: featureCreateManyProductInputEnvelope
    connect?: featureWhereUniqueInput | featureWhereUniqueInput[]
  }

  export type stylesUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<stylesCreateWithoutProductInput, stylesUncheckedCreateWithoutProductInput> | stylesCreateWithoutProductInput[] | stylesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: stylesCreateOrConnectWithoutProductInput | stylesCreateOrConnectWithoutProductInput[]
    createMany?: stylesCreateManyProductInputEnvelope
    connect?: stylesWhereUniqueInput | stylesWhereUniqueInput[]
  }

  export type relatedUncheckedCreateNestedManyWithoutProduct1Input = {
    create?: XOR<relatedCreateWithoutProduct1Input, relatedUncheckedCreateWithoutProduct1Input> | relatedCreateWithoutProduct1Input[] | relatedUncheckedCreateWithoutProduct1Input[]
    connectOrCreate?: relatedCreateOrConnectWithoutProduct1Input | relatedCreateOrConnectWithoutProduct1Input[]
    createMany?: relatedCreateManyProduct1InputEnvelope
    connect?: relatedWhereUniqueInput | relatedWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type featureUpdateManyWithoutProductNestedInput = {
    create?: XOR<featureCreateWithoutProductInput, featureUncheckedCreateWithoutProductInput> | featureCreateWithoutProductInput[] | featureUncheckedCreateWithoutProductInput[]
    connectOrCreate?: featureCreateOrConnectWithoutProductInput | featureCreateOrConnectWithoutProductInput[]
    upsert?: featureUpsertWithWhereUniqueWithoutProductInput | featureUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: featureCreateManyProductInputEnvelope
    set?: featureWhereUniqueInput | featureWhereUniqueInput[]
    disconnect?: featureWhereUniqueInput | featureWhereUniqueInput[]
    delete?: featureWhereUniqueInput | featureWhereUniqueInput[]
    connect?: featureWhereUniqueInput | featureWhereUniqueInput[]
    update?: featureUpdateWithWhereUniqueWithoutProductInput | featureUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: featureUpdateManyWithWhereWithoutProductInput | featureUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: featureScalarWhereInput | featureScalarWhereInput[]
  }

  export type stylesUpdateManyWithoutProductNestedInput = {
    create?: XOR<stylesCreateWithoutProductInput, stylesUncheckedCreateWithoutProductInput> | stylesCreateWithoutProductInput[] | stylesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: stylesCreateOrConnectWithoutProductInput | stylesCreateOrConnectWithoutProductInput[]
    upsert?: stylesUpsertWithWhereUniqueWithoutProductInput | stylesUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: stylesCreateManyProductInputEnvelope
    set?: stylesWhereUniqueInput | stylesWhereUniqueInput[]
    disconnect?: stylesWhereUniqueInput | stylesWhereUniqueInput[]
    delete?: stylesWhereUniqueInput | stylesWhereUniqueInput[]
    connect?: stylesWhereUniqueInput | stylesWhereUniqueInput[]
    update?: stylesUpdateWithWhereUniqueWithoutProductInput | stylesUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: stylesUpdateManyWithWhereWithoutProductInput | stylesUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: stylesScalarWhereInput | stylesScalarWhereInput[]
  }

  export type relatedUpdateManyWithoutProduct1NestedInput = {
    create?: XOR<relatedCreateWithoutProduct1Input, relatedUncheckedCreateWithoutProduct1Input> | relatedCreateWithoutProduct1Input[] | relatedUncheckedCreateWithoutProduct1Input[]
    connectOrCreate?: relatedCreateOrConnectWithoutProduct1Input | relatedCreateOrConnectWithoutProduct1Input[]
    upsert?: relatedUpsertWithWhereUniqueWithoutProduct1Input | relatedUpsertWithWhereUniqueWithoutProduct1Input[]
    createMany?: relatedCreateManyProduct1InputEnvelope
    set?: relatedWhereUniqueInput | relatedWhereUniqueInput[]
    disconnect?: relatedWhereUniqueInput | relatedWhereUniqueInput[]
    delete?: relatedWhereUniqueInput | relatedWhereUniqueInput[]
    connect?: relatedWhereUniqueInput | relatedWhereUniqueInput[]
    update?: relatedUpdateWithWhereUniqueWithoutProduct1Input | relatedUpdateWithWhereUniqueWithoutProduct1Input[]
    updateMany?: relatedUpdateManyWithWhereWithoutProduct1Input | relatedUpdateManyWithWhereWithoutProduct1Input[]
    deleteMany?: relatedScalarWhereInput | relatedScalarWhereInput[]
  }

  export type featureUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<featureCreateWithoutProductInput, featureUncheckedCreateWithoutProductInput> | featureCreateWithoutProductInput[] | featureUncheckedCreateWithoutProductInput[]
    connectOrCreate?: featureCreateOrConnectWithoutProductInput | featureCreateOrConnectWithoutProductInput[]
    upsert?: featureUpsertWithWhereUniqueWithoutProductInput | featureUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: featureCreateManyProductInputEnvelope
    set?: featureWhereUniqueInput | featureWhereUniqueInput[]
    disconnect?: featureWhereUniqueInput | featureWhereUniqueInput[]
    delete?: featureWhereUniqueInput | featureWhereUniqueInput[]
    connect?: featureWhereUniqueInput | featureWhereUniqueInput[]
    update?: featureUpdateWithWhereUniqueWithoutProductInput | featureUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: featureUpdateManyWithWhereWithoutProductInput | featureUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: featureScalarWhereInput | featureScalarWhereInput[]
  }

  export type stylesUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<stylesCreateWithoutProductInput, stylesUncheckedCreateWithoutProductInput> | stylesCreateWithoutProductInput[] | stylesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: stylesCreateOrConnectWithoutProductInput | stylesCreateOrConnectWithoutProductInput[]
    upsert?: stylesUpsertWithWhereUniqueWithoutProductInput | stylesUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: stylesCreateManyProductInputEnvelope
    set?: stylesWhereUniqueInput | stylesWhereUniqueInput[]
    disconnect?: stylesWhereUniqueInput | stylesWhereUniqueInput[]
    delete?: stylesWhereUniqueInput | stylesWhereUniqueInput[]
    connect?: stylesWhereUniqueInput | stylesWhereUniqueInput[]
    update?: stylesUpdateWithWhereUniqueWithoutProductInput | stylesUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: stylesUpdateManyWithWhereWithoutProductInput | stylesUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: stylesScalarWhereInput | stylesScalarWhereInput[]
  }

  export type relatedUncheckedUpdateManyWithoutProduct1NestedInput = {
    create?: XOR<relatedCreateWithoutProduct1Input, relatedUncheckedCreateWithoutProduct1Input> | relatedCreateWithoutProduct1Input[] | relatedUncheckedCreateWithoutProduct1Input[]
    connectOrCreate?: relatedCreateOrConnectWithoutProduct1Input | relatedCreateOrConnectWithoutProduct1Input[]
    upsert?: relatedUpsertWithWhereUniqueWithoutProduct1Input | relatedUpsertWithWhereUniqueWithoutProduct1Input[]
    createMany?: relatedCreateManyProduct1InputEnvelope
    set?: relatedWhereUniqueInput | relatedWhereUniqueInput[]
    disconnect?: relatedWhereUniqueInput | relatedWhereUniqueInput[]
    delete?: relatedWhereUniqueInput | relatedWhereUniqueInput[]
    connect?: relatedWhereUniqueInput | relatedWhereUniqueInput[]
    update?: relatedUpdateWithWhereUniqueWithoutProduct1Input | relatedUpdateWithWhereUniqueWithoutProduct1Input[]
    updateMany?: relatedUpdateManyWithWhereWithoutProduct1Input | relatedUpdateManyWithWhereWithoutProduct1Input[]
    deleteMany?: relatedScalarWhereInput | relatedScalarWhereInput[]
  }

  export type productCreateNestedOneWithoutRelatedInput = {
    create?: XOR<productCreateWithoutRelatedInput, productUncheckedCreateWithoutRelatedInput>
    connectOrCreate?: productCreateOrConnectWithoutRelatedInput
    connect?: productWhereUniqueInput
  }

  export type productUpdateOneRequiredWithoutRelatedNestedInput = {
    create?: XOR<productCreateWithoutRelatedInput, productUncheckedCreateWithoutRelatedInput>
    connectOrCreate?: productCreateOrConnectWithoutRelatedInput
    upsert?: productUpsertWithoutRelatedInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutRelatedInput, productUpdateWithoutRelatedInput>, productUncheckedUpdateWithoutRelatedInput>
  }

  export type productCreateNestedOneWithoutFeaturesInput = {
    create?: XOR<productCreateWithoutFeaturesInput, productUncheckedCreateWithoutFeaturesInput>
    connectOrCreate?: productCreateOrConnectWithoutFeaturesInput
    connect?: productWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type productUpdateOneRequiredWithoutFeaturesNestedInput = {
    create?: XOR<productCreateWithoutFeaturesInput, productUncheckedCreateWithoutFeaturesInput>
    connectOrCreate?: productCreateOrConnectWithoutFeaturesInput
    upsert?: productUpsertWithoutFeaturesInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutFeaturesInput, productUpdateWithoutFeaturesInput>, productUncheckedUpdateWithoutFeaturesInput>
  }

  export type productCreateNestedOneWithoutStylesInput = {
    create?: XOR<productCreateWithoutStylesInput, productUncheckedCreateWithoutStylesInput>
    connectOrCreate?: productCreateOrConnectWithoutStylesInput
    connect?: productWhereUniqueInput
  }

  export type photosCreateNestedManyWithoutStylesInput = {
    create?: XOR<photosCreateWithoutStylesInput, photosUncheckedCreateWithoutStylesInput> | photosCreateWithoutStylesInput[] | photosUncheckedCreateWithoutStylesInput[]
    connectOrCreate?: photosCreateOrConnectWithoutStylesInput | photosCreateOrConnectWithoutStylesInput[]
    createMany?: photosCreateManyStylesInputEnvelope
    connect?: photosWhereUniqueInput | photosWhereUniqueInput[]
  }

  export type skuCreateNestedManyWithoutStyleInput = {
    create?: XOR<skuCreateWithoutStyleInput, skuUncheckedCreateWithoutStyleInput> | skuCreateWithoutStyleInput[] | skuUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: skuCreateOrConnectWithoutStyleInput | skuCreateOrConnectWithoutStyleInput[]
    createMany?: skuCreateManyStyleInputEnvelope
    connect?: skuWhereUniqueInput | skuWhereUniqueInput[]
  }

  export type photosUncheckedCreateNestedManyWithoutStylesInput = {
    create?: XOR<photosCreateWithoutStylesInput, photosUncheckedCreateWithoutStylesInput> | photosCreateWithoutStylesInput[] | photosUncheckedCreateWithoutStylesInput[]
    connectOrCreate?: photosCreateOrConnectWithoutStylesInput | photosCreateOrConnectWithoutStylesInput[]
    createMany?: photosCreateManyStylesInputEnvelope
    connect?: photosWhereUniqueInput | photosWhereUniqueInput[]
  }

  export type skuUncheckedCreateNestedManyWithoutStyleInput = {
    create?: XOR<skuCreateWithoutStyleInput, skuUncheckedCreateWithoutStyleInput> | skuCreateWithoutStyleInput[] | skuUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: skuCreateOrConnectWithoutStyleInput | skuCreateOrConnectWithoutStyleInput[]
    createMany?: skuCreateManyStyleInputEnvelope
    connect?: skuWhereUniqueInput | skuWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type productUpdateOneRequiredWithoutStylesNestedInput = {
    create?: XOR<productCreateWithoutStylesInput, productUncheckedCreateWithoutStylesInput>
    connectOrCreate?: productCreateOrConnectWithoutStylesInput
    upsert?: productUpsertWithoutStylesInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutStylesInput, productUpdateWithoutStylesInput>, productUncheckedUpdateWithoutStylesInput>
  }

  export type photosUpdateManyWithoutStylesNestedInput = {
    create?: XOR<photosCreateWithoutStylesInput, photosUncheckedCreateWithoutStylesInput> | photosCreateWithoutStylesInput[] | photosUncheckedCreateWithoutStylesInput[]
    connectOrCreate?: photosCreateOrConnectWithoutStylesInput | photosCreateOrConnectWithoutStylesInput[]
    upsert?: photosUpsertWithWhereUniqueWithoutStylesInput | photosUpsertWithWhereUniqueWithoutStylesInput[]
    createMany?: photosCreateManyStylesInputEnvelope
    set?: photosWhereUniqueInput | photosWhereUniqueInput[]
    disconnect?: photosWhereUniqueInput | photosWhereUniqueInput[]
    delete?: photosWhereUniqueInput | photosWhereUniqueInput[]
    connect?: photosWhereUniqueInput | photosWhereUniqueInput[]
    update?: photosUpdateWithWhereUniqueWithoutStylesInput | photosUpdateWithWhereUniqueWithoutStylesInput[]
    updateMany?: photosUpdateManyWithWhereWithoutStylesInput | photosUpdateManyWithWhereWithoutStylesInput[]
    deleteMany?: photosScalarWhereInput | photosScalarWhereInput[]
  }

  export type skuUpdateManyWithoutStyleNestedInput = {
    create?: XOR<skuCreateWithoutStyleInput, skuUncheckedCreateWithoutStyleInput> | skuCreateWithoutStyleInput[] | skuUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: skuCreateOrConnectWithoutStyleInput | skuCreateOrConnectWithoutStyleInput[]
    upsert?: skuUpsertWithWhereUniqueWithoutStyleInput | skuUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: skuCreateManyStyleInputEnvelope
    set?: skuWhereUniqueInput | skuWhereUniqueInput[]
    disconnect?: skuWhereUniqueInput | skuWhereUniqueInput[]
    delete?: skuWhereUniqueInput | skuWhereUniqueInput[]
    connect?: skuWhereUniqueInput | skuWhereUniqueInput[]
    update?: skuUpdateWithWhereUniqueWithoutStyleInput | skuUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: skuUpdateManyWithWhereWithoutStyleInput | skuUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: skuScalarWhereInput | skuScalarWhereInput[]
  }

  export type photosUncheckedUpdateManyWithoutStylesNestedInput = {
    create?: XOR<photosCreateWithoutStylesInput, photosUncheckedCreateWithoutStylesInput> | photosCreateWithoutStylesInput[] | photosUncheckedCreateWithoutStylesInput[]
    connectOrCreate?: photosCreateOrConnectWithoutStylesInput | photosCreateOrConnectWithoutStylesInput[]
    upsert?: photosUpsertWithWhereUniqueWithoutStylesInput | photosUpsertWithWhereUniqueWithoutStylesInput[]
    createMany?: photosCreateManyStylesInputEnvelope
    set?: photosWhereUniqueInput | photosWhereUniqueInput[]
    disconnect?: photosWhereUniqueInput | photosWhereUniqueInput[]
    delete?: photosWhereUniqueInput | photosWhereUniqueInput[]
    connect?: photosWhereUniqueInput | photosWhereUniqueInput[]
    update?: photosUpdateWithWhereUniqueWithoutStylesInput | photosUpdateWithWhereUniqueWithoutStylesInput[]
    updateMany?: photosUpdateManyWithWhereWithoutStylesInput | photosUpdateManyWithWhereWithoutStylesInput[]
    deleteMany?: photosScalarWhereInput | photosScalarWhereInput[]
  }

  export type skuUncheckedUpdateManyWithoutStyleNestedInput = {
    create?: XOR<skuCreateWithoutStyleInput, skuUncheckedCreateWithoutStyleInput> | skuCreateWithoutStyleInput[] | skuUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: skuCreateOrConnectWithoutStyleInput | skuCreateOrConnectWithoutStyleInput[]
    upsert?: skuUpsertWithWhereUniqueWithoutStyleInput | skuUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: skuCreateManyStyleInputEnvelope
    set?: skuWhereUniqueInput | skuWhereUniqueInput[]
    disconnect?: skuWhereUniqueInput | skuWhereUniqueInput[]
    delete?: skuWhereUniqueInput | skuWhereUniqueInput[]
    connect?: skuWhereUniqueInput | skuWhereUniqueInput[]
    update?: skuUpdateWithWhereUniqueWithoutStyleInput | skuUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: skuUpdateManyWithWhereWithoutStyleInput | skuUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: skuScalarWhereInput | skuScalarWhereInput[]
  }

  export type stylesCreateNestedOneWithoutSkuInput = {
    create?: XOR<stylesCreateWithoutSkuInput, stylesUncheckedCreateWithoutSkuInput>
    connectOrCreate?: stylesCreateOrConnectWithoutSkuInput
    connect?: stylesWhereUniqueInput
  }

  export type stylesUpdateOneRequiredWithoutSkuNestedInput = {
    create?: XOR<stylesCreateWithoutSkuInput, stylesUncheckedCreateWithoutSkuInput>
    connectOrCreate?: stylesCreateOrConnectWithoutSkuInput
    upsert?: stylesUpsertWithoutSkuInput
    connect?: stylesWhereUniqueInput
    update?: XOR<XOR<stylesUpdateToOneWithWhereWithoutSkuInput, stylesUpdateWithoutSkuInput>, stylesUncheckedUpdateWithoutSkuInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type stylesCreateWithoutPhotosInput = {
    name: string
    sale_price?: Decimal | DecimalJsLike | number | string | null
    original_price?: Decimal | DecimalJsLike | number | string | null
    default_style: boolean
    product: productCreateNestedOneWithoutStylesInput
    sku?: skuCreateNestedManyWithoutStyleInput
  }

  export type stylesUncheckedCreateWithoutPhotosInput = {
    id?: number
    productId: number
    name: string
    sale_price?: Decimal | DecimalJsLike | number | string | null
    original_price?: Decimal | DecimalJsLike | number | string | null
    default_style: boolean
    sku?: skuUncheckedCreateNestedManyWithoutStyleInput
  }

  export type stylesCreateOrConnectWithoutPhotosInput = {
    where: stylesWhereUniqueInput
    create: XOR<stylesCreateWithoutPhotosInput, stylesUncheckedCreateWithoutPhotosInput>
  }

  export type stylesUpsertWithoutPhotosInput = {
    update: XOR<stylesUpdateWithoutPhotosInput, stylesUncheckedUpdateWithoutPhotosInput>
    create: XOR<stylesCreateWithoutPhotosInput, stylesUncheckedCreateWithoutPhotosInput>
    where?: stylesWhereInput
  }

  export type stylesUpdateToOneWithWhereWithoutPhotosInput = {
    where?: stylesWhereInput
    data: XOR<stylesUpdateWithoutPhotosInput, stylesUncheckedUpdateWithoutPhotosInput>
  }

  export type stylesUpdateWithoutPhotosInput = {
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
    product?: productUpdateOneRequiredWithoutStylesNestedInput
    sku?: skuUpdateManyWithoutStyleNestedInput
  }

  export type stylesUncheckedUpdateWithoutPhotosInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
    sku?: skuUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type featureCreateWithoutProductInput = {
    feature: string
    value?: string | null
  }

  export type featureUncheckedCreateWithoutProductInput = {
    id?: number
    feature: string
    value?: string | null
  }

  export type featureCreateOrConnectWithoutProductInput = {
    where: featureWhereUniqueInput
    create: XOR<featureCreateWithoutProductInput, featureUncheckedCreateWithoutProductInput>
  }

  export type featureCreateManyProductInputEnvelope = {
    data: featureCreateManyProductInput | featureCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type stylesCreateWithoutProductInput = {
    name: string
    sale_price?: Decimal | DecimalJsLike | number | string | null
    original_price?: Decimal | DecimalJsLike | number | string | null
    default_style: boolean
    photos?: photosCreateNestedManyWithoutStylesInput
    sku?: skuCreateNestedManyWithoutStyleInput
  }

  export type stylesUncheckedCreateWithoutProductInput = {
    id?: number
    name: string
    sale_price?: Decimal | DecimalJsLike | number | string | null
    original_price?: Decimal | DecimalJsLike | number | string | null
    default_style: boolean
    photos?: photosUncheckedCreateNestedManyWithoutStylesInput
    sku?: skuUncheckedCreateNestedManyWithoutStyleInput
  }

  export type stylesCreateOrConnectWithoutProductInput = {
    where: stylesWhereUniqueInput
    create: XOR<stylesCreateWithoutProductInput, stylesUncheckedCreateWithoutProductInput>
  }

  export type stylesCreateManyProductInputEnvelope = {
    data: stylesCreateManyProductInput | stylesCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type relatedCreateWithoutProduct1Input = {
    related_product_id: number
  }

  export type relatedUncheckedCreateWithoutProduct1Input = {
    id?: number
    related_product_id: number
  }

  export type relatedCreateOrConnectWithoutProduct1Input = {
    where: relatedWhereUniqueInput
    create: XOR<relatedCreateWithoutProduct1Input, relatedUncheckedCreateWithoutProduct1Input>
  }

  export type relatedCreateManyProduct1InputEnvelope = {
    data: relatedCreateManyProduct1Input | relatedCreateManyProduct1Input[]
    skipDuplicates?: boolean
  }

  export type featureUpsertWithWhereUniqueWithoutProductInput = {
    where: featureWhereUniqueInput
    update: XOR<featureUpdateWithoutProductInput, featureUncheckedUpdateWithoutProductInput>
    create: XOR<featureCreateWithoutProductInput, featureUncheckedCreateWithoutProductInput>
  }

  export type featureUpdateWithWhereUniqueWithoutProductInput = {
    where: featureWhereUniqueInput
    data: XOR<featureUpdateWithoutProductInput, featureUncheckedUpdateWithoutProductInput>
  }

  export type featureUpdateManyWithWhereWithoutProductInput = {
    where: featureScalarWhereInput
    data: XOR<featureUpdateManyMutationInput, featureUncheckedUpdateManyWithoutProductInput>
  }

  export type featureScalarWhereInput = {
    AND?: featureScalarWhereInput | featureScalarWhereInput[]
    OR?: featureScalarWhereInput[]
    NOT?: featureScalarWhereInput | featureScalarWhereInput[]
    id?: IntFilter<"feature"> | number
    product_id?: IntFilter<"feature"> | number
    feature?: StringFilter<"feature"> | string
    value?: StringNullableFilter<"feature"> | string | null
  }

  export type stylesUpsertWithWhereUniqueWithoutProductInput = {
    where: stylesWhereUniqueInput
    update: XOR<stylesUpdateWithoutProductInput, stylesUncheckedUpdateWithoutProductInput>
    create: XOR<stylesCreateWithoutProductInput, stylesUncheckedCreateWithoutProductInput>
  }

  export type stylesUpdateWithWhereUniqueWithoutProductInput = {
    where: stylesWhereUniqueInput
    data: XOR<stylesUpdateWithoutProductInput, stylesUncheckedUpdateWithoutProductInput>
  }

  export type stylesUpdateManyWithWhereWithoutProductInput = {
    where: stylesScalarWhereInput
    data: XOR<stylesUpdateManyMutationInput, stylesUncheckedUpdateManyWithoutProductInput>
  }

  export type stylesScalarWhereInput = {
    AND?: stylesScalarWhereInput | stylesScalarWhereInput[]
    OR?: stylesScalarWhereInput[]
    NOT?: stylesScalarWhereInput | stylesScalarWhereInput[]
    id?: IntFilter<"styles"> | number
    productId?: IntFilter<"styles"> | number
    name?: StringFilter<"styles"> | string
    sale_price?: DecimalNullableFilter<"styles"> | Decimal | DecimalJsLike | number | string | null
    original_price?: DecimalNullableFilter<"styles"> | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFilter<"styles"> | boolean
  }

  export type relatedUpsertWithWhereUniqueWithoutProduct1Input = {
    where: relatedWhereUniqueInput
    update: XOR<relatedUpdateWithoutProduct1Input, relatedUncheckedUpdateWithoutProduct1Input>
    create: XOR<relatedCreateWithoutProduct1Input, relatedUncheckedCreateWithoutProduct1Input>
  }

  export type relatedUpdateWithWhereUniqueWithoutProduct1Input = {
    where: relatedWhereUniqueInput
    data: XOR<relatedUpdateWithoutProduct1Input, relatedUncheckedUpdateWithoutProduct1Input>
  }

  export type relatedUpdateManyWithWhereWithoutProduct1Input = {
    where: relatedScalarWhereInput
    data: XOR<relatedUpdateManyMutationInput, relatedUncheckedUpdateManyWithoutProduct1Input>
  }

  export type relatedScalarWhereInput = {
    AND?: relatedScalarWhereInput | relatedScalarWhereInput[]
    OR?: relatedScalarWhereInput[]
    NOT?: relatedScalarWhereInput | relatedScalarWhereInput[]
    id?: IntFilter<"related"> | number
    current_product_id?: IntFilter<"related"> | number
    related_product_id?: IntFilter<"related"> | number
  }

  export type productCreateWithoutRelatedInput = {
    name: string
    slogan: string
    description: string
    category: string
    default_price?: Decimal | DecimalJsLike | number | string | null
    features?: featureCreateNestedManyWithoutProductInput
    styles?: stylesCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutRelatedInput = {
    id?: number
    name: string
    slogan: string
    description: string
    category: string
    default_price?: Decimal | DecimalJsLike | number | string | null
    features?: featureUncheckedCreateNestedManyWithoutProductInput
    styles?: stylesUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutRelatedInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutRelatedInput, productUncheckedCreateWithoutRelatedInput>
  }

  export type productUpsertWithoutRelatedInput = {
    update: XOR<productUpdateWithoutRelatedInput, productUncheckedUpdateWithoutRelatedInput>
    create: XOR<productCreateWithoutRelatedInput, productUncheckedCreateWithoutRelatedInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutRelatedInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutRelatedInput, productUncheckedUpdateWithoutRelatedInput>
  }

  export type productUpdateWithoutRelatedInput = {
    name?: StringFieldUpdateOperationsInput | string
    slogan?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    default_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    features?: featureUpdateManyWithoutProductNestedInput
    styles?: stylesUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutRelatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slogan?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    default_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    features?: featureUncheckedUpdateManyWithoutProductNestedInput
    styles?: stylesUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateWithoutFeaturesInput = {
    name: string
    slogan: string
    description: string
    category: string
    default_price?: Decimal | DecimalJsLike | number | string | null
    styles?: stylesCreateNestedManyWithoutProductInput
    related?: relatedCreateNestedManyWithoutProduct1Input
  }

  export type productUncheckedCreateWithoutFeaturesInput = {
    id?: number
    name: string
    slogan: string
    description: string
    category: string
    default_price?: Decimal | DecimalJsLike | number | string | null
    styles?: stylesUncheckedCreateNestedManyWithoutProductInput
    related?: relatedUncheckedCreateNestedManyWithoutProduct1Input
  }

  export type productCreateOrConnectWithoutFeaturesInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutFeaturesInput, productUncheckedCreateWithoutFeaturesInput>
  }

  export type productUpsertWithoutFeaturesInput = {
    update: XOR<productUpdateWithoutFeaturesInput, productUncheckedUpdateWithoutFeaturesInput>
    create: XOR<productCreateWithoutFeaturesInput, productUncheckedCreateWithoutFeaturesInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutFeaturesInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutFeaturesInput, productUncheckedUpdateWithoutFeaturesInput>
  }

  export type productUpdateWithoutFeaturesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slogan?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    default_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    styles?: stylesUpdateManyWithoutProductNestedInput
    related?: relatedUpdateManyWithoutProduct1NestedInput
  }

  export type productUncheckedUpdateWithoutFeaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slogan?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    default_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    styles?: stylesUncheckedUpdateManyWithoutProductNestedInput
    related?: relatedUncheckedUpdateManyWithoutProduct1NestedInput
  }

  export type productCreateWithoutStylesInput = {
    name: string
    slogan: string
    description: string
    category: string
    default_price?: Decimal | DecimalJsLike | number | string | null
    features?: featureCreateNestedManyWithoutProductInput
    related?: relatedCreateNestedManyWithoutProduct1Input
  }

  export type productUncheckedCreateWithoutStylesInput = {
    id?: number
    name: string
    slogan: string
    description: string
    category: string
    default_price?: Decimal | DecimalJsLike | number | string | null
    features?: featureUncheckedCreateNestedManyWithoutProductInput
    related?: relatedUncheckedCreateNestedManyWithoutProduct1Input
  }

  export type productCreateOrConnectWithoutStylesInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutStylesInput, productUncheckedCreateWithoutStylesInput>
  }

  export type photosCreateWithoutStylesInput = {
    url: string
    thumbnail_url: string
  }

  export type photosUncheckedCreateWithoutStylesInput = {
    id?: number
    url: string
    thumbnail_url: string
  }

  export type photosCreateOrConnectWithoutStylesInput = {
    where: photosWhereUniqueInput
    create: XOR<photosCreateWithoutStylesInput, photosUncheckedCreateWithoutStylesInput>
  }

  export type photosCreateManyStylesInputEnvelope = {
    data: photosCreateManyStylesInput | photosCreateManyStylesInput[]
    skipDuplicates?: boolean
  }

  export type skuCreateWithoutStyleInput = {
    size: string
    quantity: number
  }

  export type skuUncheckedCreateWithoutStyleInput = {
    id?: number
    size: string
    quantity: number
  }

  export type skuCreateOrConnectWithoutStyleInput = {
    where: skuWhereUniqueInput
    create: XOR<skuCreateWithoutStyleInput, skuUncheckedCreateWithoutStyleInput>
  }

  export type skuCreateManyStyleInputEnvelope = {
    data: skuCreateManyStyleInput | skuCreateManyStyleInput[]
    skipDuplicates?: boolean
  }

  export type productUpsertWithoutStylesInput = {
    update: XOR<productUpdateWithoutStylesInput, productUncheckedUpdateWithoutStylesInput>
    create: XOR<productCreateWithoutStylesInput, productUncheckedCreateWithoutStylesInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutStylesInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutStylesInput, productUncheckedUpdateWithoutStylesInput>
  }

  export type productUpdateWithoutStylesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slogan?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    default_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    features?: featureUpdateManyWithoutProductNestedInput
    related?: relatedUpdateManyWithoutProduct1NestedInput
  }

  export type productUncheckedUpdateWithoutStylesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slogan?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    default_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    features?: featureUncheckedUpdateManyWithoutProductNestedInput
    related?: relatedUncheckedUpdateManyWithoutProduct1NestedInput
  }

  export type photosUpsertWithWhereUniqueWithoutStylesInput = {
    where: photosWhereUniqueInput
    update: XOR<photosUpdateWithoutStylesInput, photosUncheckedUpdateWithoutStylesInput>
    create: XOR<photosCreateWithoutStylesInput, photosUncheckedCreateWithoutStylesInput>
  }

  export type photosUpdateWithWhereUniqueWithoutStylesInput = {
    where: photosWhereUniqueInput
    data: XOR<photosUpdateWithoutStylesInput, photosUncheckedUpdateWithoutStylesInput>
  }

  export type photosUpdateManyWithWhereWithoutStylesInput = {
    where: photosScalarWhereInput
    data: XOR<photosUpdateManyMutationInput, photosUncheckedUpdateManyWithoutStylesInput>
  }

  export type photosScalarWhereInput = {
    AND?: photosScalarWhereInput | photosScalarWhereInput[]
    OR?: photosScalarWhereInput[]
    NOT?: photosScalarWhereInput | photosScalarWhereInput[]
    id?: IntFilter<"photos"> | number
    styleId?: IntFilter<"photos"> | number
    url?: StringFilter<"photos"> | string
    thumbnail_url?: StringFilter<"photos"> | string
  }

  export type skuUpsertWithWhereUniqueWithoutStyleInput = {
    where: skuWhereUniqueInput
    update: XOR<skuUpdateWithoutStyleInput, skuUncheckedUpdateWithoutStyleInput>
    create: XOR<skuCreateWithoutStyleInput, skuUncheckedCreateWithoutStyleInput>
  }

  export type skuUpdateWithWhereUniqueWithoutStyleInput = {
    where: skuWhereUniqueInput
    data: XOR<skuUpdateWithoutStyleInput, skuUncheckedUpdateWithoutStyleInput>
  }

  export type skuUpdateManyWithWhereWithoutStyleInput = {
    where: skuScalarWhereInput
    data: XOR<skuUpdateManyMutationInput, skuUncheckedUpdateManyWithoutStyleInput>
  }

  export type skuScalarWhereInput = {
    AND?: skuScalarWhereInput | skuScalarWhereInput[]
    OR?: skuScalarWhereInput[]
    NOT?: skuScalarWhereInput | skuScalarWhereInput[]
    id?: IntFilter<"sku"> | number
    styleId?: IntFilter<"sku"> | number
    size?: StringFilter<"sku"> | string
    quantity?: IntFilter<"sku"> | number
  }

  export type stylesCreateWithoutSkuInput = {
    name: string
    sale_price?: Decimal | DecimalJsLike | number | string | null
    original_price?: Decimal | DecimalJsLike | number | string | null
    default_style: boolean
    product: productCreateNestedOneWithoutStylesInput
    photos?: photosCreateNestedManyWithoutStylesInput
  }

  export type stylesUncheckedCreateWithoutSkuInput = {
    id?: number
    productId: number
    name: string
    sale_price?: Decimal | DecimalJsLike | number | string | null
    original_price?: Decimal | DecimalJsLike | number | string | null
    default_style: boolean
    photos?: photosUncheckedCreateNestedManyWithoutStylesInput
  }

  export type stylesCreateOrConnectWithoutSkuInput = {
    where: stylesWhereUniqueInput
    create: XOR<stylesCreateWithoutSkuInput, stylesUncheckedCreateWithoutSkuInput>
  }

  export type stylesUpsertWithoutSkuInput = {
    update: XOR<stylesUpdateWithoutSkuInput, stylesUncheckedUpdateWithoutSkuInput>
    create: XOR<stylesCreateWithoutSkuInput, stylesUncheckedCreateWithoutSkuInput>
    where?: stylesWhereInput
  }

  export type stylesUpdateToOneWithWhereWithoutSkuInput = {
    where?: stylesWhereInput
    data: XOR<stylesUpdateWithoutSkuInput, stylesUncheckedUpdateWithoutSkuInput>
  }

  export type stylesUpdateWithoutSkuInput = {
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
    product?: productUpdateOneRequiredWithoutStylesNestedInput
    photos?: photosUpdateManyWithoutStylesNestedInput
  }

  export type stylesUncheckedUpdateWithoutSkuInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
    photos?: photosUncheckedUpdateManyWithoutStylesNestedInput
  }

  export type featureCreateManyProductInput = {
    id?: number
    feature: string
    value?: string | null
  }

  export type stylesCreateManyProductInput = {
    id?: number
    name: string
    sale_price?: Decimal | DecimalJsLike | number | string | null
    original_price?: Decimal | DecimalJsLike | number | string | null
    default_style: boolean
  }

  export type relatedCreateManyProduct1Input = {
    id?: number
    related_product_id: number
  }

  export type featureUpdateWithoutProductInput = {
    feature?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type featureUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    feature?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type featureUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    feature?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type stylesUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
    photos?: photosUpdateManyWithoutStylesNestedInput
    sku?: skuUpdateManyWithoutStyleNestedInput
  }

  export type stylesUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
    photos?: photosUncheckedUpdateManyWithoutStylesNestedInput
    sku?: skuUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type stylesUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sale_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    original_price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    default_style?: BoolFieldUpdateOperationsInput | boolean
  }

  export type relatedUpdateWithoutProduct1Input = {
    related_product_id?: IntFieldUpdateOperationsInput | number
  }

  export type relatedUncheckedUpdateWithoutProduct1Input = {
    id?: IntFieldUpdateOperationsInput | number
    related_product_id?: IntFieldUpdateOperationsInput | number
  }

  export type relatedUncheckedUpdateManyWithoutProduct1Input = {
    id?: IntFieldUpdateOperationsInput | number
    related_product_id?: IntFieldUpdateOperationsInput | number
  }

  export type photosCreateManyStylesInput = {
    id?: number
    url: string
    thumbnail_url: string
  }

  export type skuCreateManyStyleInput = {
    id?: number
    size: string
    quantity: number
  }

  export type photosUpdateWithoutStylesInput = {
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: StringFieldUpdateOperationsInput | string
  }

  export type photosUncheckedUpdateWithoutStylesInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: StringFieldUpdateOperationsInput | string
  }

  export type photosUncheckedUpdateManyWithoutStylesInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: StringFieldUpdateOperationsInput | string
  }

  export type skuUpdateWithoutStyleInput = {
    size?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type skuUncheckedUpdateWithoutStyleInput = {
    id?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type skuUncheckedUpdateManyWithoutStyleInput = {
    id?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}